[{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"objectives","dir":"Articles","previous_headings":"Introduction","what":"Objectives","title":"Basic Workflow","text":"Collect drug adverse drug reaction IDs Perform standard data management VigiBase ECL Conduct disproportionality analysis (univariate multivariate) want access script templates steps, see vignette(\"template_dictionary\") vignette(\"template_main\")","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"reminder-of-database-structure","dir":"Articles","previous_headings":"Introduction","what":"Reminder of Database Structure","title":"Basic Workflow","text":"table unique identifying key keys perform joins. Goal tutorial: perform disproportionality analysis colitis nivolumab among checkpoint inhibitor cases.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-0-load-packages","dir":"Articles","previous_headings":"Introduction","what":"Step 0: Load Packages","title":"Basic Workflow","text":"","code":"library(vigicaen) library(rlang) library(dplyr)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"building_tables","dir":"Articles","previous_headings":"","what":"Build tables from source files","title":"Basic Workflow","text":"process done per database version. don’t follow tutorial, since use package built-example tables. However, working real analyses, need process step first. See vignette vignette(\"getting_started\").","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"collecting_ids","dir":"Articles","previous_headings":"","what":"Collecting IDs","title":"Basic Workflow","text":"whole package relies defining dictionary drugs adrs interest. collection terms stored named lists. see, d_sel list contains three named vectors: nivolumab, ipilimumab, nivo_or_ipi. vectors can contain one names drugs. names vectors don’t drug names. used created columns later process. pass named list selections ID collector functions: get_* family. get_drecno() drugs, get_atc_code() ATC classes get_llt_soc() get_llt_smq() adverse drug reactions functions allow collect IDs (e.g. codes) matching drugs adrs specific dictionary. drugs, use WHODrug dictionary, collect Drug Record Numbers (DrecNos) time, Medicinal Product Ids (MedicinalProd_Ids) specific scenarii. adrs, use Medical Dictionary Regulatory Activities (MedDRA), collect term codes (low-level term codes). , important note can work terms (like Preferred Terms, High Level terms, etc.). ID collector just collect low-level term codes higher level terms, resulting pretty long list codes, VigiBase data structured low-level term codes.","code":"# drug selection d_sel <-   list(     nivolumab   = \"nivolumab\",     ipilimumab  = \"ipilimumab\",     nivo_or_ipi = c(\"nivolumab\", \"ipilimumab\")   )  # adverse drug reaction selection  a_sel <-    list(     colitis     = \"Colitis\",     pneumonitis = \"Pneumonitis\"   )"},{"path":[]},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"principle","dir":"Articles","previous_headings":"Data management > Drugs","what":"Principle","title":"Basic Workflow","text":"Load demo, drug, mp tables. Select one medications interest. Identify drug codes (e.g., DrecNo(s)) associated drug using mp table. Search cases exposed medications using codes drug table. Update demo table: code 1 case reports medication interest, 0 otherwise. Check data management Step 1 performed dt_parquet() tables, using built-example tables tutorial. Step 2 3 can referred “dictionary” steps. Step 3 performed get_drecno() get_atc_code(). Steps 4 5 performed add_drug(). step 6 performed check_dm().","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-1-load-the-tables","dir":"Articles","previous_headings":"Data management > Drugs","what":"Step 1: Load the tables","title":"Basic Workflow","text":"Note: working tables, need load , dt_parquet().","code":"demo <- demo_ drug <- drug_  mp <- mp_"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-2-choose-drugs-of-interest","dir":"Articles","previous_headings":"Data management > Drugs","what":"Step 2: Choose drugs of Interest","title":"Basic Workflow","text":"probably interesting part process, scientific point view. now, ’s pretty trivial. ’ve decided drugs like study (e.g. nivolumab tutorial), need create named list character vectors. Remember use lower case names d_sel (capital letters: Good: “nivolumab”, Wrong: “Nivolumab” “NIVOLUMAB”) ideal way picking drugs using name. name international non-proprietary name (INN) drug. drugs one INN (e.g. paracetamol acetaminophen), still unique name (time, one INN). ID collector get_drecno() let know missed name. Alternatively, can work Anatomical Therapeutical Classification (ATC) codes investigate set drug. explained ATC section.","code":"d_sel <- # drug selection   list2(     nivolumab = \"nivolumab\"   )  d_sel #> $nivolumab #> [1] \"nivolumab\""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-3-identify-drug-codes","dir":"Articles","previous_headings":"Data management > Drugs","what":"Step 3: Identify drug codes","title":"Basic Workflow","text":"function get_drecno() allows query mp table selection drug names. takes several arguments, two must filled : selection drugs table containing correspondence name code (, mp). always look carefully printed message. Use get_drecno() argument verbose = TRUE (default). see get_drecno() finds two entries containing drug “nivolumab” mp table: entry nivolumab alone entry ipilimumab;nivolumab combination second entry identified allow_combination argument set TRUE default. allows broader identification specialties containing nivolumab. situation, behavior desirable want sure identify cases reporting drug. Since actually codes looking , can (optionally) set verbose argument FALSE keep result R object called d_drecno.","code":"get_drecno(   d_sel = d_sel,   mp = mp_,   verbose = TRUE   ) #>  #> ── get_drecno() ──────────────────────────────────────────────────────────────── #>  #> ── `d_sel`: Matching drugs ── #>  #> ── ✔ Matched drugs #>  #> → `nivolumab`: \"nivolumab\" and \"ipilimumab;nivolumab\" #>  #>  #> ℹ Set `verbose` to FALSE to suppress this section. #>  #>  #>  #> ──────────────────────────────────────────────────────────────────────────────── #> $nivolumab #> [1] 111841511  98742214 d_drecno <-   get_drecno(     d_sel = d_sel,     mp = mp_,     verbose = FALSE     )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"steps-4-and-5-add_drug-function","dir":"Articles","previous_headings":"Data management > Drugs","what":"Steps 4 and 5: add_drug() function","title":"Basic Workflow","text":"identify cases reporting drug interest add corresponding column demo, use add_drug() function. add_drug() function takes 3 mandatory arguments: dataset add drug variable(s) (, demo) named list containing codes drug(s) drug table linking drug intake case. , tidyverse syntax","code":"demo <-    add_drug(     .data = demo,     d_code = d_drecno,     drug_data = drug) #> ℹ `.data` detected as `demo` table. demo #>      UMCReportId AgeGroup Gender DateDatabase   Type Region FirstDateDatabase #>            <int>   <char> <char>       <char> <char> <char>            <char> #>   1:   141557914        7      2     20210927      2      4          20200703 #>   2:    48453218        9      -     20170809      1      2          20170809 #>   3:   127169804        6      2     20150814      1      2          20150814 #>   4:    35746144        6      1     20120221      1      2          20111114 #>   5:   143784377        9      1     20190418      1      2          20190418 #>  ---                                                                          #> 746:    48354189        6      1     20150814      2      2          20150814 #> 747:    20398003        7      1     20220107      1      3          20211001 #> 748:   109565701        8      1     20220107      1      3          20220107 #> 749:    95759941        9      1     20200301      2      4          20180810 #> 750:    76017998        7      1     20210301      2      4          20201216 #>      nivolumab #>          <num> #>   1:         0 #>   2:         0 #>   3:         0 #>   4:         0 #>   5:         1 #>  ---           #> 746:         0 #> 747:         0 #> 748:         0 #> 749:         1 #> 750:         0 demo <-    demo |>    add_drug(     d_code = d_drecno,     drug_data = drug   ) #> ℹ `.data` detected as `demo` table."},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-6-check-your-data-management","dir":"Articles","previous_headings":"Data management > Drugs","what":"Step 6: Check your data management","title":"Basic Workflow","text":"may seem trivial, essential step construction dataset. many ways check code worked. , check_dm() function count number rows dataset desired column equal 1. shows many rows demo value 1 nivolumab column (e.g. many cases identified reporting nivolumab reactions). , see 225 cases report nivolumab.","code":"check_dm(demo, \"nivolumab\") #>           [,1] #> nivolumab  225"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"atc_classes","dir":"Articles","previous_headings":"Data management > Drugs","what":"Step 2 and 3 variant: ATC classes","title":"Basic Workflow","text":"correspondence ATC (Anatomical Therapeutical Classification) classes drug codes found thg table. table, drug codes stored MedicinalProd_Id. therefore necessary make second correspondence mp find DrecNo. can done get_atc_code() function. drugs, first need identify ATC class interest (, “L03”). get_atc_code() function requires mp thg tables, well selection ATC classes. default, function retrieves DrecNos associated ATC class. possible retrieve MedicinalProd_Ids instead setting vigilyze argument FALSE. interest using MedicinalProd_Ids instead DrecNos restrict drug panel packages corresponding specific ATC class (e.g., might want find packages corticosteroids work ATC class “S01BA”, corresponds ophtalmic steroids). DrecNos identified, can add demo table, add_drug() function.","code":"atc_sel <-   list2(l03 = \"L03\")  atc_drecno <-    get_atc_code(     atc_sel = atc_sel,     mp = mp,     thg_data = thg_     ) #> ℹ vigilyze set to TRUE, extracting DrecNos (?get_atc_code for details) str(atc_drecno) #> List of 1 #>  $ l03: num [1:13] 2.20e+07 1.41e+08 1.01e+08 1.25e+08 3.93e+07 ... demo |>    add_drug(     d_code = atc_drecno,     drug_data = drug   ) #> ℹ `.data` detected as `demo` table. #>      UMCReportId AgeGroup Gender DateDatabase   Type Region FirstDateDatabase #>            <int>   <char> <char>       <char> <char> <char>            <char> #>   1:   141557914        7      2     20210927      2      4          20200703 #>   2:    48453218        9      -     20170809      1      2          20170809 #>   3:   127169804        6      2     20150814      1      2          20150814 #>   4:    35746144        6      1     20120221      1      2          20111114 #>   5:   143784377        9      1     20190418      1      2          20190418 #>  ---                                                                          #> 746:    48354189        6      1     20150814      2      2          20150814 #> 747:    20398003        7      1     20220107      1      3          20211001 #> 748:   109565701        8      1     20220107      1      3          20220107 #> 749:    95759941        9      1     20200301      2      4          20180810 #> 750:    76017998        7      1     20210301      2      4          20201216 #>      nivolumab   l03 #>          <num> <num> #>   1:         0     0 #>   2:         0     0 #>   3:         0     0 #>   4:         0     0 #>   5:         1     0 #>  ---                 #> 746:         0     0 #> 747:         0     0 #> 748:         0     0 #> 749:         1     0 #> 750:         0     0"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-4-and-5-variant-suspect-concomitant-interacting","dir":"Articles","previous_headings":"Data management > Drugs","what":"Step 4 and 5 variant: Suspect, concomitant, interacting","title":"Basic Workflow","text":"can choose work drugs according “reputation basis”. information stored Basis column drug table. 1 suspect 2 concomitant 3 interacting using add_drug() function, can specify type status interested , repbasis argument. default, value \"sci\" indicates consider drug whether suspect, concomitant, interacting. can change selection.","code":"demo |>    add_drug(     d_code = d_drecno,     drug_data = drug,     repbasis = \"sci\"   ) |>    check_dm(\"nivolumab\") #> ℹ `.data` detected as `demo` table. #>           [,1] #> nivolumab  225  # suspected only  demo |>    add_drug(     d_code = d_drecno,     drug_data = drug,     repbasis = \"s\"   ) |>    check_dm(\"nivolumab\") #> ℹ `.data` detected as `demo` table. #>           [,1] #> nivolumab  214"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"create-multiple-drug-columns","dir":"Articles","previous_headings":"Data management > Drugs","what":"Create multiple drug columns","title":"Basic Workflow","text":"work multiple drugs, need update initial d_sel list.","code":"d_sel <-    list2(     nivolumab = \"nivolumab\",     pembrolizumab = \"pembrolizumab\"   )  d_drecno <-   d_sel |>    get_drecno(mp = mp) #>  #> ── get_drecno() ──────────────────────────────────────────────────────────────── #>  #> ── `d_sel`: Matching drugs ── #>  #> ── ✔ Matched drugs #>  #> → `nivolumab`: \"nivolumab\" and \"ipilimumab;nivolumab\" #> → `pembrolizumab`: \"pembrolizumab\" #>  #>  #> ℹ Set `verbose` to FALSE to suppress this section. #>  #>  #>  #> ────────────────────────────────────────────────────────────────────────────────  demo <-    demo |>    add_drug(     d_drecno,     drug_data = drug   ) #> ℹ `.data` detected as `demo` table.  demo |>    check_dm(c(\"nivolumab\", \"pembrolizumab\")) #>               [,1] #> nivolumab      225 #> pembrolizumab  298"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"drug-groups","dir":"Articles","previous_headings":"Data management > Drugs","what":"Drug groups","title":"Basic Workflow","text":"want work level group drugs, ATC classes match needs perfectly, can group d_sel list.","code":"d_sel <-    list2(     analgesics = c(\"paracetamol\", \"tramadol\"),     ici = c(\"nivolumab\", \"pembrolizumab\")   )  d_drecno <-   d_sel |>    get_drecno(mp = mp,              allow_combination = FALSE) #>  #> ── get_drecno() ──────────────────────────────────────────────────────────────── #>  #> ── `d_sel`: Matching drugs ── #>  #> ── ✔ Matched drugs #>  #> → `analgesics`: \"paracetamol\" and \"tramadol\" #> → `ici`: \"nivolumab\" and \"pembrolizumab\" #>  #>  #> ℹ Set `verbose` to FALSE to suppress this section. #>  #>  #>  #> ────────────────────────────────────────────────────────────────────────────────  demo <-    demo |>    add_drug(     d_drecno,     drug_data = drug   ) #> ℹ `.data` detected as `demo` table.  demo |>    check_dm(names(d_sel)) #>            [,1] #> analgesics   68 #> ici         519"},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"principles","dir":"Articles","previous_headings":"Data management > Adverse drug reactions","what":"Principles","title":"Basic Workflow","text":"Load demo, adr, meddra tables. Choose adverse event(s) interest. Identify event codes (low-level terms according MedDRA classification). can found meddra table smq tables. Search cases presented event, using codes Update demo table: code 1 case reports event interest, 0 otherwise. Check data management Similarly drug workflow, steps 2 3 can referred “dictionary” steps. Step 3 uses get_llt_soc() get_llt_smq().","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-1-load-the-tables-1","dir":"Articles","previous_headings":"Data management > Adverse drug reactions","what":"Step 1: Load the tables","title":"Basic Workflow","text":"demo loaded drug workflow.","code":"adr <- adr_ meddra <- meddra_"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-2-choose-events-of-interest","dir":"Articles","previous_headings":"Data management > Adverse drug reactions","what":"Step 2: Choose events of interest","title":"Basic Workflow","text":"start list adverse events interest, grouped altogether name “a_colitis”. MedDRA terms always start capital letter, sure provide exact case, e.g. Good : “Colitis”, Wrong : “colitis” “COLITIS”. sure selected terms belong hierarchical level (preferred term, high level term…) MedDRA. , use Preferred Terms.","code":"a_sel_pt <-   list2(     a_colitis = c(       \"Colitis\",       \"Autoimmune colitis\",       \"Colitis microscopic\",       \"Diarrhoea\",       \"Diarrhoea haemorrhagic\",       \"Duodenitis\",       \"Enteritis\",       \"Enterocolitis\",       \"Enterocolitis haemorrhagic\",       \"Ulcerative gastritis\"     )   )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-3-identify-event-codes","dir":"Articles","previous_headings":"Data management > Adverse drug reactions","what":"Step 3: Identify event codes","title":"Basic Workflow","text":"get_llt_soc() function allows query meddra. alternative use get_llt_smq() function, allows query smq tables. Notice collect low level term codes, even work higher level terms, like preferred terms, high level terms. intentional: list collects low level term codes composing higher level term. See Collecting ID section.","code":"a_llt <-    get_llt_soc(     term_sel = a_sel_pt,     term_level = \"pt\",     meddra = meddra_     ) #>  #> ── get_llt_soc() ─────────────────────────────────────────────────────────────── #>  #> ── ✔ Matched reactions at `pt` level (number of codes) ── #>  #> → `a_colitis`: \"Autoimmune colitis (1)\", \"Colitis (25)\", \"Colitis microscopic #>   (3)\", \"Diarrhoea (53)\", \"Diarrhoea haemorrhagic (8)\", \"Duodenitis (5)\", #>   \"Enteritis (8)\", \"Enterocolitis (4)\", \"Enterocolitis haemorrhagic (10)\", and #>   \"Ulcerative gastritis (1)\" #>  #>  #> ℹ Set `verbose` to FALSE to suppress this section.  a_llt #> $a_colitis #>   [1] 146319904  72535511 145048103  83961164  60502763  86999793  31902962 #>   [8]  74358151  93223730  42212111  47872019   9787331  97183180  76243579 #>  [15]  57421483  83801839  35994947 145921181 126960392 139876147   7485419 #>  [22]  56928874 106618606 136185109 134273207  69329666  71614386  39085290 #>  [29]  44792724  60161897 117694644  33268936  52457844   3588697  50677287 #>  [36]  86522225  52090591 115452495  57673555  36505933  97974705 116341322 #>  [43] 100087548  92141110  76778618 129074932  74911722  30822686 106700292 #>  [50]  40062048  94663343  99951844  10796290  16785547 100720721  26400336 #>  [57]  71857357   9581412 142354851 119711285  14275999 116525173  46785130 #>  [64]  69158837  92034682  11303229  32580170 122765038  94746500  97136680 #>  [71]  92371714 104194644  80678406 130746421   6544507  54366037  11722654 #>  [78]  23855288    996046 104846192  35477411  75848043   5029037  50188094 #>  [85]  84444296 136071015   5144633  62896477  85459432 142989340  22136645 #>  [92]  33346088  89785585  72565521  53464576 138014054  76736595 121450460 #>  [99]  52582197  39107722  31994263  68617678 128230716 114942138  24470833 #> [106]  27038937  54746042  71417752  12508751  74249211 109131610 121557512 #> [113]  18989134 118819900  11580419 137272208 137544759  76219908"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"steps-4-and-5-add_adr-function","dir":"Articles","previous_headings":"Data management > Adverse drug reactions","what":"Steps 4 and 5: add_adr() function","title":"Basic Workflow","text":"add_adr() function allows identify cases reporting adverse event interest add corresponding column demo.","code":"demo <-    add_adr(     .data = demo,     a_code = a_llt,     adr_data = adr) #> ℹ `.data` detected as `demo` table."},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"step-6-check-your-data-management-1","dir":"Articles","previous_headings":"Data management > Adverse drug reactions","what":"Step 6: Check your data management","title":"Basic Workflow","text":"check_dm() also works adr.","code":"demo |>    check_dm(\"a_colitis\") #>           [,1] #> a_colitis  104"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"other-variables","dir":"Articles","previous_headings":"Data management","what":"Other variables","title":"Basic Workflow","text":"may need create variables perform analysis, example age sex multivariable analysis.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"age","dir":"Articles","previous_headings":"Data management > Other variables","what":"Age","title":"Basic Workflow","text":"demo table contains AgeGroup column, groups ages categories. may want recode match research question","code":"demo <-   demo |>   mutate(     age = cut(as.integer(AgeGroup),               breaks = c(0,4,5,6,7,8),               include.lowest = TRUE, right = TRUE,               labels = c(\"<18\", \"18-45\",\"45-64\", \"65-74\", \"75+\"))   )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"sex","dir":"Articles","previous_headings":"Data management > Other variables","what":"Sex","title":"Basic Workflow","text":"demo table contains Gender column, can also create new sex column (values 1 men, 2 women, NA otherwise)","code":"demo <-   demo |>    mutate(     sex = ifelse(Gender == \"1\", 1,                  ifelse(Gender == \"2\", 2, NA_real_)                  )     )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"using-case_when","dir":"Articles","previous_headings":"Data management > Other variables","what":"Using case_when()","title":"Basic Workflow","text":"case_when() function dplyr package allows manage multiple options single function, slightly different syntax. documentation case_when() can found dplyr package documentation. just remember options evaluated sequentially, top bottom.","code":"demo <-    demo |>    mutate(     sex = case_when(Gender == \"1\" ~ 1,                     Gender == \"2\" ~ 2,                     TRUE ~ NA_real_)     )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"seriousness-death","dir":"Articles","previous_headings":"Data management > Other variables","what":"Seriousness, death","title":"Basic Workflow","text":"table contains Seriousness column, indicates whether case serious , whether patient experienced fatal issue /follow-. serious death columns coded TRUE/FALSE values example. particular reason prefer 1/0 codes. just matter preference. Seriousness can several levels, level 1 death. (see subsidiary files)","code":"# ---- Serious ---- ####  out <- out_  demo <-    demo |>    mutate(     serious =        ifelse(         UMCReportId %in% out$UMCReportId,         UMCReportId %in%            (out |>            filter(Serious == \"Y\") |>            pull(UMCReportId)           ),         NA)     )  # ---- Death + outcome availability ---- ####  demo <-    demo |>    mutate(death =             ifelse(UMCReportId %in% out$UMCReportId,                   UMCReportId %in%                      (out |>                      filter(Seriousness == \"1\") |>                      pull(UMCReportId)                     ),                   NA)          )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"disproportionality","dir":"Articles","previous_headings":"","what":"Disproportionality","title":"Basic Workflow","text":"demo dataset now drug column nivolumab, adr column colitis. can perform disproportionality analysis two variables.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"disproportionality-metrics","dir":"Articles","previous_headings":"Disproportionality > Univariate analysis","what":"Disproportionality metrics","title":"Basic Workflow","text":"Reporting Odds-Ratio (ROR) Information Component essentially measure thing: disproportionality. compute_dispro() computes . or_ci reporting Odds-Ratio confidence interval (default: 95%CI). ic ic_tail Information Component, lower end credibility interval (default: IC025).","code":"demo |>    compute_dispro(     y = \"a_colitis\",     x = \"nivolumab\"     ) #> # A tibble: 1 × 9 #>   y         x         n_obs n_exp or    or_ci          ic ic_tail ci_level #>   <chr>     <chr>     <dbl> <dbl> <chr> <chr>       <dbl>   <dbl> <chr>    #> 1 a_colitis nivolumab    44  31.2 1.88  (1.23-2.88) 0.489  0.0314 95%"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"advanced-modelling-multivariate-analysis","dir":"Articles","previous_headings":"Disproportionality","what":"Advanced modelling, multivariate analysis","title":"Basic Workflow","text":"point, also possible run statistical model including drug adr parameters, also potential variables age sex. example, one wish perform multivariate logistic regression reporting colitis nivolumab, adjusted age groups sex. glm() function stats package can used purpose. logistic regression models, estimates lead (reporting) exponential. Adding covariates straightforward","code":"mod <- glm(a_colitis ~ nivolumab,             data = demo, family = \"binomial\")  summary(mod) #>  #> Call: #> glm(formula = a_colitis ~ nivolumab, family = \"binomial\", data = demo) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  -2.0477     0.1372 -14.928  < 2e-16 *** #> nivolumab     0.6334     0.2170   2.919  0.00351 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 603.80  on 749  degrees of freedom #> Residual deviance: 595.53  on 748  degrees of freedom #> AIC: 599.53 #>  #> Number of Fisher Scoring iterations: 4 summary(mod)$coefficients #>               Estimate Std. Error    z value     Pr(>|z|) #> (Intercept) -2.0476928  0.1371736 -14.927752 2.174746e-50 #> nivolumab    0.6333854  0.2169532   2.919456 3.506429e-03  exp(summary(mod)$coefficients[2, 1]) #> [1] 1.883978 mod2 <- glm(a_colitis ~ nivolumab + sex + age,             data = demo,             family = \"binomial\")  summary(mod2) #>  #> Call: #> glm(formula = a_colitis ~ nivolumab + sex + age, family = \"binomial\",  #>     data = demo) #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept) -14.8881   882.7435  -0.017   0.9865   #> nivolumab     0.4613     0.2679   1.722   0.0851 . #> sex           0.1610     0.2517   0.640   0.5223   #> age18-45     12.7789   882.7435   0.014   0.9884   #> age45-64     12.7362   882.7434   0.014   0.9885   #> age65-74     13.1715   882.7434   0.015   0.9881   #> age75+       12.6702   882.7434   0.014   0.9885   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 436.14  on 489  degrees of freedom #> Residual deviance: 429.24  on 483  degrees of freedom #>   (260 observations deleted due to missingness) #> AIC: 443.24 #>  #> Number of Fisher Scoring iterations: 13"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"extract-odds-ratio-with-compute_or_mod","dir":"Articles","previous_headings":"Disproportionality > Advanced modelling, multivariate analysis","what":"Extract Odds-Ratio with compute_or_mod()","title":"Basic Workflow","text":"several packages can extract model. compute_or_mod() function just one many ways .","code":"mod_or <-    compute_or_mod(     summary(mod2)$coefficients,     estimate = Estimate,     std_er = Std..Error     )  mod_or #>             rn    Estimate  Std..Error     z.value   Pr...z..           or #>         <char>       <num>       <num>       <num>      <num>        <num> #> 1: (Intercept) -14.8881304 882.7435188 -0.01686575 0.98654372 3.421111e-07 #> 2:   nivolumab   0.4613151   0.2679460  1.72167184 0.08512898 1.586159e+00 #> 3:         sex   0.1610313   0.2516929  0.63979269 0.52230739 1.174722e+00 #> 4:    age18-45  12.7789374 882.7434892  0.01447639 0.98844992 3.546680e+05 #> 5:    age45-64  12.7361773 882.7434133  0.01442795 0.98848856 3.398220e+05 #> 6:    age65-74  13.1714980 882.7434134  0.01492109 0.98809513 5.251809e+05 #> 7:      age75+  12.6701788 882.7434409  0.01435318 0.98854821 3.181184e+05 #>       low_ci    up_ci        orl          ci ci_level signif_ror #>        <num>    <num>     <char>      <char>   <char>      <num> #> 1: 0.0000000      Inf       0.00  (0.00-Inf)      95%          0 #> 2: 0.9381463 2.681777       1.59 (0.94-2.68)      95%          0 #> 3: 0.7172881 1.923873       1.17 (0.72-1.92)      95%          0 #> 4: 0.0000000      Inf 354,668.00  (0.00-Inf)      95%          0 #> 5: 0.0000000      Inf 339,822.03  (0.00-Inf)      95%          0 #> 6: 0.0000000      Inf 525,180.88  (0.00-Inf)      95%          0 #> 7: 0.0000000      Inf 318,118.36  (0.00-Inf)      95%          0"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/basic_workflow.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Basic Workflow","text":"’re now set create drugs adrs columns demo dataset. first step many modelling possibilities! want go next? Dive descriptive features, time onset, dechallenge, rechallenge, screening drugs adrs. vignette(\"descriptive\") Learn interactions pharmacovigilance database vignette(\"interactions\")","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"objectives","dir":"Articles","previous_headings":"Introduction","what":"Objectives","title":"Descriptive","text":"Compute descriptive statistics (vigibase) dataset Understand structure link table","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"prerequisite","dir":"Articles","previous_headings":"Introduction","what":"Prerequisite","title":"Descriptive","text":"familiar data management drugs adrs, get_* add_* functions (see vignette(\"basic_workflow\"))","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"step-0-load-packages","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics","what":"Step 0: Load packages","title":"Descriptive","text":"","code":"library(vigicaen) library(rlang) library(dplyr)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"step-1-load-datasets-and-add-drug-and-adr-columns","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics","what":"Step 1: Load datasets and add drug and adr columns","title":"Descriptive","text":"vignette uses preloaded datasets (spurious suspdup table). preloaded drug adr dictionaries. aim describe drug adr counts, also variables (age, sex, type reporter), added . can still refer ","code":"demo     <- demo_ adr      <- adr_ drug     <- drug_ link     <- link_ out      <- out_ followup <- followup_  srce     <- srce_  thg      <- thg_ mp       <- mp_ meddra   <- meddra_ smq_list <- smq_list_ smq_content <- smq_content_  suspdup <-    data.table::data.table(     UMCReportId = 1,     SuspectedduplicateReportId = NA   ) d_drecno <- ex_$d_drecno  a_llt <- ex_$a_llt demo <-   demo |>   add_drug(     d_code = d_drecno,     drug_data = drug   ) #> ℹ `.data` detected as `demo` table.  demo <-   demo |>   add_adr(     a_code = a_llt,     adr_data = adr   ) #> ℹ `.data` detected as `demo` table. # Age, sex  demo <-   demo |>   mutate(     age = cut(as.integer(AgeGroup),               breaks = c(0,4,5,6,7,8),               include.lowest = TRUE, right = TRUE,               labels = c(\"<18\", \"18-45\",\"45-64\", \"65-74\", \"75+\")),      sex = case_when(Gender == \"1\" ~ 1,                     Gender == \"2\" ~ 2,                     Gender %in% c(\"-\",\"0\",\"9\") ~ NA_real_,                     TRUE ~ NA_real_)   )  # Death + outcome availability  demo <-    demo |>    mutate(death =             ifelse(UMCReportId %in% out$UMCReportId,                   UMCReportId %in%                      (out |>                      filter(Seriousness == \"1\") |>                      pull(UMCReportId)                     ),                   NA)          )  # follow-up, seriousness  demo <-   demo |>   mutate(     fup = if_else(UMCReportId %in% followup$UMCReportId, 1, 0),     serious =        ifelse(         UMCReportId %in% out$UMCReportId,         UMCReportId %in%            (out |>            filter(Serious == \"Y\") |>            pull(UMCReportId)           ),         NA)   )  # year  demo <-    demo |>    mutate(     year = as.numeric(substr(FirstDateDatabase, start = 1, stop = 4))     )  # type of reporter  demo <-   demo |>   left_join(     srce |> transmute(UMCReportId, type_reporter = Type),     by = \"UMCReportId\")"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"desc_facvar","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics","what":"desc_facvar()","title":"Descriptive","text":"desc_facvar() generates summary categorical variables 2 levels. .data argument dataset describe. Described variables passed vf, character vector.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"multi-level-variables","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics > desc_facvar()","what":"Multi-level variables","title":"Descriptive","text":"Let’s take demo dataset example, variable “age”. output format data.frame, class tibble. first column, var, contains name variable interest. second column, level, contains level variable. example, first line shows number patients whose age variable (var) “<18”, .e. patients 18 years old. percentage appears value column, count cases total number reports information available. number reports available information recalled n_avail column.","code":"desc_facvar(   .data = demo,   vf = \"age\" ) #> # A tibble: 5 × 4 #>   var   level value           n_avail #>   <chr> <chr> <chr>             <int> #> 1 age   <18   \" 1/499 (0%) \"      499 #> 2 age   18-45 \"43/499 (9%) \"      499 #> 3 age   45-64 \"173/499 (35%)\"     499 #> 4 age   65-74 \"174/499 (35%)\"     499 #> 5 age   75+   \"108/499 (22%)\"     499"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"binary-variables","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics > desc_facvar()","what":"Binary variables","title":"Descriptive","text":"happens variable two levels, example 1 0, often case drug adr variables? output format unchanged, data.frame output. reading unchanged: get count cases variable nivolumab, two levels. thus 225 patients exposed nivolumab, 750 reports total, represents 30% patients. Conversely, 525 reports mention nivolumab. general, presenting results, level 0 binary variables provides little information can omitted.","code":"desc_facvar(   .data = demo,   vf = \"nivolumab\" ) #> # A tibble: 2 × 4 #>   var       level value         n_avail #>   <chr>     <chr> <chr>           <int> #> 1 nivolumab 0     525/750 (70%)     750 #> 2 nivolumab 1     225/750 (30%)     750"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"logical-variables","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics > desc_facvar()","what":"Logical variables","title":"Descriptive","text":"Let’s continue another example “seriousness” status. “serious” variable takes values TRUE/FALSE, 1/0, interpreted way (artifact construction). Thus, 566 cases considered serious, 747 information available.","code":"desc_facvar(   .data = demo,   vf = \"serious\" ) #> # A tibble: 2 × 4 #>   var     level value         n_avail #>   <chr>   <chr> <chr>           <int> #> 1 serious FALSE 181/747 (24%)     747 #> 2 serious TRUE  566/747 (76%)     747"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"exporting-raw-values","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics > desc_facvar()","what":"Exporting raw values","title":"Descriptive","text":"can export run plotting formatting functions, argument export_raw_values.","code":"desc_facvar(   .data = demo,   vf = \"nivolumab\",   export_raw_values = TRUE ) #> # A tibble: 2 × 6 #>   var       level value         n_avail     n    pc #>   <chr>     <chr> <chr>           <int> <int> <dbl> #> 1 nivolumab 0     525/750 (70%)     750   525    70 #> 2 nivolumab 1     225/750 (30%)     750   225    30"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"grouping-several-levels-of-a-variable","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics","what":"Grouping several levels of a variable","title":"Descriptive","text":"available categories match final needs? example age, one patient 18 years old, patients 45 years old. like group data single line summary. solution create variable desired levels upstream, data management step. true columns like “year”. studying “year” column, common get error message error message “many levels detected year” intentional, avoid passing continuous variables vf argument. maximum number categories can taken variable treated desc_facvar controlled ncat_max argument. variable ncat_max different levels, function stops. can therefore solve problem adjusting value parameter. allows review main years, less transposable final table manuscript. categorization reporting years may informative.","code":"demo <-   demo |>   mutate(     age2 = cut(as.integer(AgeGroup),               breaks = c(0, 6, 7, 8),               include.lowest = TRUE, right = TRUE,               labels = c(\"<64\", \"65-74\", \"75+\"))   )   desc_facvar(   demo,   vf = \"age2\" ) #> # A tibble: 3 × 4 #>   var   level value         n_avail #>   <chr> <chr> <chr>           <int> #> 1 age2  <64   217/499 (43%)     499 #> 2 age2  65-74 174/499 (35%)     499 #> 3 age2  75+   108/499 (22%)     499 desc_facvar(   .data = demo,   vf = \"year\" ) #> # A tibble: 13 × 4 #>    var   level value           n_avail #>    <chr> <chr> <chr>             <int> #>  1 year  2011  \" 1/750 (0%) \"      750 #>  2 year  2012  \" 1/750 (0%) \"      750 #>  3 year  2013  \" 2/750 (0%) \"      750 #>  4 year  2014  \"10/750 (1%) \"      750 #>  5 year  2015  \" 8/750 (1%) \"      750 #>  6 year  2016  \"15/750 (2%) \"      750 #>  7 year  2017  \"116/750 (15%)\"     750 #>  8 year  2018  \"150/750 (20%)\"     750 #>  9 year  2019  \"116/750 (15%)\"     750 #> 10 year  2020  \"72/750 (10%)\"      750 #> 11 year  2021  \"99/750 (13%)\"      750 #> 12 year  2022  \"119/750 (16%)\"     750 #> 13 year  2023  \"41/750 (5%) \"      750 desc_facvar(   .data = demo,   vf = \"year\",   ncat_max = 20 ) #> # A tibble: 13 × 4 #>    var   level value           n_avail #>    <chr> <chr> <chr>             <int> #>  1 year  2011  \" 1/750 (0%) \"      750 #>  2 year  2012  \" 1/750 (0%) \"      750 #>  3 year  2013  \" 2/750 (0%) \"      750 #>  4 year  2014  \"10/750 (1%) \"      750 #>  5 year  2015  \" 8/750 (1%) \"      750 #>  6 year  2016  \"15/750 (2%) \"      750 #>  7 year  2017  \"116/750 (15%)\"     750 #>  8 year  2018  \"150/750 (20%)\"     750 #>  9 year  2019  \"116/750 (15%)\"     750 #> 10 year  2020  \"72/750 (10%)\"      750 #> 11 year  2021  \"99/750 (13%)\"      750 #> 12 year  2022  \"119/750 (16%)\"     750 #> 13 year  2023  \"41/750 (5%) \"      750"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"explicit-categorical-variables","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics","what":"Explicit categorical variables","title":"Descriptive","text":"Levels variables indicated numbers. know 389 cases come Region “2”, without able say geographical area region belongs . obtain correspondence, external tables, one Region: (can found subsidiary tables vigibase). Several options possible bring information back directly demo, simplest use factors Note transformation two steps. first sort levels variable, second assign labels levels. sequence necessary avoid random sorting levels. transformation effect modifying result desc_facvar() two variables mainly affected phenomenon Type type_reporter. transformation code found vignette(\"template_main.R\")","code":"desc_facvar(   .data = demo,   vf = \"Region\" ) #> # A tibble: 6 × 4 #>   var    level value           n_avail #>   <chr>  <chr> <chr>             <int> #> 1 Region 1     \" 1/750 (0%) \"      750 #> 2 Region 2     \"389/750 (52%)\"     750 #> 3 Region 3     \"17/750 (2%) \"      750 #> 4 Region 4     \"276/750 (37%)\"     750 #> 5 Region 5     \" 6/750 (1%) \"      750 #> 6 Region 6     \"61/750 (8%) \"      750 demo <-   demo |>    mutate(     Region = factor(Region, levels = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"))   )  levels(demo$Region) <-   c(\"African Region\",                                         \"Region of the Americas\",                                 \"South-East Asia Region\",                                 \"European Region\",                                        \"Eastern Mediterranean Region\",                           \"Western Pacific Region\"     ) desc_facvar(   .data = demo,   vf = \"Region\" ) #> # A tibble: 6 × 4 #>   var    level                        value           n_avail #>   <chr>  <chr>                        <chr>             <int> #> 1 Region African Region               \" 1/750 (0%) \"      750 #> 2 Region Region of the Americas       \"389/750 (52%)\"     750 #> 3 Region South-East Asia Region       \"17/750 (2%) \"      750 #> 4 Region European Region              \"276/750 (37%)\"     750 #> 5 Region Eastern Mediterranean Region \" 6/750 (1%) \"      750 #> 6 Region Western Pacific Region       \"61/750 (8%) \"      750"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"other-arguments-of-desc_facvar","dir":"Articles","previous_headings":"Demo data: counts of drugs, adrs, case characteristics","what":"Other arguments of desc_facvar()","title":"Descriptive","text":"Three arguments allow control output format results. format character string must necessarily contain values n, N pc. argument allows customize way result displayed. example, want put percentage brackets instead parentheses can also change elements argument. pad_width allows center results middle character string. particularly high numbers, can increase value parameter, results remain well centered. digits controls number digits decimal point percentage. Warning, guaranteed sum exactly 100%.","code":"desc_facvar(   .data = demo,   vf = \"nivolumab\",   format = \"n_/N_ [pc_%]\" ) #> # A tibble: 2 × 4 #>   var       level value         n_avail #>   <chr>     <chr> <chr>           <int> #> 1 nivolumab 0     525/750 [70%]     750 #> 2 nivolumab 1     225/750 [30%]     750 desc_facvar(   .data = demo,   vf = \"nivolumab\",   digits = 1 ) #> # A tibble: 2 × 4 #>   var       level value           n_avail #>   <chr>     <chr> <chr>             <int> #> 1 nivolumab 0     525/750 (70.0%)     750 #> 2 nivolumab 1     225/750 (30.0%)     750"},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"adr-data-adr-screening-and-evolution-of-adverse-events","dir":"Articles","previous_headings":"","what":"Adr data: adr screening and evolution of adverse events","title":"Descriptive","text":"screen_drug() let screen drugs reported drug dataset, sorted frequency. time, filtered drug data upstream, add_* function, allowing focus subset cases (specific drug, adr, set ) example, identify colitis cases screen drugs reaction.","code":"screen_drug(drug, mp_data = mp, top_n = 5) #> # A tibble: 5 × 4 #>   `Drug name`      DrecNo     N percentage #>   <chr>             <dbl> <int>      <dbl> #> 1 pembrolizumab  20116296   298      39.7  #> 2 nivolumab     111841511   225      30    #> 3 ipilimumab    133138448    86      11.5  #> 4 atezolizumab  112765189    69       9.2  #> 5 durvalumab    125456180    68       9.07 drug |>    add_adr(     a_llt,     adr_data = adr   ) |>    filter(a_colitis == 1) |>    screen_drug(     mp_data = mp, top_n = 5   ) #> ℹ `.data` detected as `drug` table. #> # A tibble: 5 × 4 #>   `Drug name`      DrecNo     N percentage #>   <chr>             <dbl> <int>      <dbl> #> 1 nivolumab     111841511    44       42.3 #> 2 pembrolizumab  20116296    40       38.5 #> 3 ipilimumab    133138448    20       19.2 #> 4 NA             73636724    14       13.5 #> 5 NA             34178924    13       12.5"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"adr-screening","dir":"Articles","previous_headings":"Adr data: adr screening and evolution of adverse events","what":"Adr screening","title":"Descriptive","text":"screen_adr() let screen frequent reactions reported adr dataset, sorted frequency. Different term levels can used, according meddra, argument term_level. time, filtered adr data upstream, add_* function, allowing focus subset cases (specific drug, adr, set ).","code":"screen_adr(adr_, meddra = meddra_) #>                                               term     n percentage #>                                             <char> <int>      <num> #> 1:                                            <NA>   678 90.4000000 #> 2: Respiratory, thoracic and mediastinal disorders   110 14.6666667 #> 3:                      Gastrointestinal disorders   104 13.8666667 #> 4:                              Vascular disorders     9  1.2000000 #> 5:                         Immune system disorders     6  0.8000000 #> 6:                         Hepatobiliary disorders     5  0.6666667 #> 7:          Skin and subcutaneous tissue disorders     1  0.1333333"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"outcome","dir":"Articles","previous_headings":"Adr data: adr screening and evolution of adverse events","what":"Outcome","title":"Descriptive","text":"adr table contains information evolution adverse events. possible outcomes (column Outcome) Recovered/resolved Recovering/resolving Recovered/resolved sequelae recovered/resolved Fatal Died- unrelated reaction Died- reaction may contributory adr structure follows case, identified UMCReportId, may several adverse events (Adr_Id) different outcomes. Summarizing information requires prioritization. logic follows: take ” worst evolution” possible event case, order count event case. order filter cases according drug exposition, necessary join drug data adr table.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"step-1-data-management-of-adr-with-add_drug-and-add_adr","dir":"Articles","previous_headings":"Adr data: adr screening and evolution of adverse events","what":"Step 1: Data management of adr with add_drug and add_adr","title":"Descriptive","text":"add_drug() add_adr() can used adr data. allows identify drugs adverse events interest adr table. Drugs identified case level table.","code":"adr <-   adr |>   add_drug(     d_code = d_drecno,     drug_data = drug   ) #> ℹ `.data` detected as `adr` table.  adr <-   adr |>   add_adr(     a_code = a_llt,     adr_data = adr   ) #> ℹ `.data` detected as `adr` table."},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"step-2-desc_outcome-function","dir":"Articles","previous_headings":"Adr data: adr screening and evolution of adverse events","what":"Step 2: desc_outcome() function","title":"Descriptive","text":"desc_outcome function prioritizes data according rule: Take “worst evolution” possible event case, order count event case. case adr previously filtered contain data specific adverse drug reaction (example, tb_subset()), still preferable recreate drug column add_drug (take value 1 cases).","code":"adr |>    desc_outcome(     drug_s = \"nivolumab\",     adr_s = \"a_colitis\"   ) #> # A tibble: 5 × 4 #>   drug_s    adr_s     n_cas out_label                  #>   <chr>     <chr>     <int> <chr>                      #> 1 nivolumab a_colitis    10 Unknown                    #> 2 nivolumab a_colitis    25 Recovered/resolved         #> 3 nivolumab a_colitis     6 Recovering/resolving       #> 4 nivolumab a_colitis     1 Not recovered/not resolved #> 5 nivolumab a_colitis     2 Fatal"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"link-data-time-to-onset-dechallenge-rechallenge","dir":"Articles","previous_headings":"","what":"Link data: time to onset, dechallenge, rechallenge","title":"Descriptive","text":"link table, created tb_vigibase(), contains additional information original link table. augmented UMCReportId case id tto_mean average TimeToOnsetMin, TimeToOnsetMax, days range half-difference TimeToOnsetMin TimeToOnsetMax, days additional variables useful compute time drug initiation adverse drug reaction onset, also compute dechallenge rechallenge data case level.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"step-1-load-the-datasets","dir":"Articles","previous_headings":"Link data: time to onset, dechallenge, rechallenge","what":"Step 1: Load the datasets","title":"Descriptive","text":"","code":"link <-    link_"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"step-2-add-drug-and-adr-columns","dir":"Articles","previous_headings":"Link data: time to onset, dechallenge, rechallenge","what":"Step 2: Add drug and adr columns","title":"Descriptive","text":"link table studies relationship drug - adverse event pair, within reports. therefore several lines link line (case) demo. demo table example corresponding link table ","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"learn-the-content-of-link","dir":"Articles","previous_headings":"Link data: time to onset, dechallenge, rechallenge","what":"Learn the content of link","title":"Descriptive","text":"Let’s take read data related case 1, previous example. contains two different Drug_Id 1_1 1_2: means case two different drugs. time, two different drugs (let’s say, paracetamol ibuprofen example). can also drug, different administration modalities (paracetamol two dosages, two different times). contains two different Adr_Id 1_a 1_b: means case two different adverse events. Mostly, refers two different events (e.g. hepatitis hemorrhage). Information available combination. time onset, .e. delay drug initiation event onset displayed combination reading follows: hepatitis (1_a) occurred 60 days introduction paracetamol (1_1), 30 days introduction ibuprofen (1_2). hemorrhage (1_b) occurred 45 days introduction paracetamol (1_1), 15 days introduction ibuprofen (1_2). relatively simple example, everything coherent: observe paracetamol ibuprofen introduced 30 days apart . reality often complex: previously announced, may several lines linkfor drug, different time onset. case, important decide handle multiple information. example, time onset 30 days paracetamol taken 500mg daily, time onset 15 days paracetamol taken 1000mg daily.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"identify-drugs-and-adverse-events","dir":"Articles","previous_headings":"Link data: time to onset, dechallenge, rechallenge","what":"Identify drugs and adverse events","title":"Descriptive","text":"demo adr tables, link table must completed drug adr columns, using add_* family functions. Counts check !! Warning!!, counts correspond number lines drug effect. number reports containing drug effect. want obtain information, must query demo table.","code":"link <-   link |>     add_drug(     d_code = d_drecno,     drug_data = drug   ) #> ℹ `.data` detected as `link` table.  link <-   link |>   add_adr(     a_code = a_llt,     adr_data = adr   ) #> ℹ `.data` detected as `link` table. link |>     check_dm(      cols = c(names(d_drecno), names(a_llt))      ) #>               [,1] #> ipilimumab     267 #> atezolizumab   189 #> durvalumab     166 #> nivolumab     1347 #> pembrolizumab 1819 #> avelumab        83 #> cemiplimab      38 #> tremelimumab    35 #> a_embolism      38 #> a_colitis      314 #> a_pneumonitis  238"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"time-to-onset","dir":"Articles","previous_headings":"Link data: time to onset, dechallenge, rechallenge","what":"Time to onset","title":"Descriptive","text":"time onset information contained two variables link table: TimeToOnsetMin TimeToOnsetMax. two variables reflect minimum maximum delay adverse event occurrence compared drug intake, taking account uncertainty input data. , hepatitis occurred 45 75 days first paracetamol intake. structure inherited incertitude source reporter case. case correspond data like: “Hepatitis occurred 2months paracetamol introduction”. sentence contains imprecision exact delay occurrence: exact day month? 1 month 15 days? 2 months 15 days? ? impossible decide. convention, consider true time onset +/- 15 days indicated date (, 60 - 15 = 45 days, 60 + 15 = 75 days). Two parameters derived information: mean time onset tto_mean range. calculation follows: tto_mean intuitive: average delay two available values. example, find 60 days, delay indicated reporter. range gives uncertainty: 30 days example, meaning precise 30 days. Uppsala Monitoring Centre recommendation use time onset whose range <= 1, .e. cases date known day. Note: information hours minutes also present time onset, known. keep example hepatitis, time onset 30 days paracetamol taken 500mg daily, time onset 15 days paracetamol taken 1000mg daily. case, important decide handle multiple information. Otherwise, two different tto_mean values paracetamol - hepatitis pair. need arbitrary rule synthetize data. habit take longest delay drug introduction event occurrence (.e. delay first drug intake event). Admittedly, may meet needs. information, call tto_max, obtained extract_tto(). tto_max longest delay drug introduction event occurrence. one line drug - adr pair. information can used graphical representation, derive average, range… second option possible many ways, notably desc_tto(). Several drugs reactions can queried two functions.","code":"tto_mean = (TimeToOnsetMax + TimeToOnsetMin) / 2  range = (TimeToOnsetMax + TimeToOnsetMin) / 2 - TimeToOnsetMin extract_tto(   .data = link,   drug_s = \"nivolumab\",   adr_s  = \"a_colitis\" ) #>    UMCReportId tto_max     adr_s    drug_s #> 1    108846594     205 a_colitis nivolumab #> 2     73027866     175 a_colitis nivolumab #> 3     87966085      36 a_colitis nivolumab #> 4     88371745     740 a_colitis nivolumab #> 5    138643678     379 a_colitis nivolumab #> 6     39936658      99 a_colitis nivolumab #> 7    140765885       5 a_colitis nivolumab #> 8     11372968      62 a_colitis nivolumab #> 9     63102481      57 a_colitis nivolumab #> 10    34209616       8 a_colitis nivolumab #> 11    21293261      59 a_colitis nivolumab #> 12    58329610     541 a_colitis nivolumab #> 13    38269558     393 a_colitis nivolumab #> 14    85691581     490 a_colitis nivolumab #> 15   112663221       7 a_colitis nivolumab #> 16   109716692      37 a_colitis nivolumab #> 17    56986472      47 a_colitis nivolumab #> 18    76401465     390 a_colitis nivolumab #> 19   125056616      18 a_colitis nivolumab #> 20    33942691      36 a_colitis nivolumab #> 21   133088642      23 a_colitis nivolumab #> 22   143881598     113 a_colitis nivolumab #> 23    79620779      85 a_colitis nivolumab #> 24    95759941      59 a_colitis nivolumab desc_tto(   .data = link,   drug_s = \"nivolumab\",   adr_s  = \"a_colitis\" ) #>      drug_s     adr_s     var level                         value n_avail #> 1 nivolumab a_colitis tto_max  <NA> 60.5 (36.0-248.5) [5.0-740.0]      24 desc_tto(   .data = link,   drug_s = c(\"nivolumab\", \"pembrolizumab\"),   adr_s  = c(\"a_colitis\", \"a_pneumonitis\") ) #>          drug_s         adr_s     var level                           value #> 1     nivolumab     a_colitis tto_max  <NA>   60.5 (36.0-248.5) [5.0-740.0] #> 2 pembrolizumab     a_colitis tto_max  <NA> 44.0 (18.5-112.5) [1.0-1,207.0] #> 3     nivolumab a_pneumonitis tto_max  <NA>  75.0 (49.8-167.0) [18.0-602.0] #> 4 pembrolizumab a_pneumonitis tto_max  <NA> 52.0 (21.0-101.0) [0.0-1,050.0] #>   n_avail #> 1      24 #> 2      15 #> 3      22 #> 4      17"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"dechallenge","dir":"Articles","previous_headings":"Link data: time to onset, dechallenge, rechallenge","what":"Dechallenge","title":"Descriptive","text":"desc_dch() synthesizes number positive dechallenges: positive dechallenge occurs drug stopped dosage reduced, reaction abatted.","code":"desc_dch(   link,   drug_s = \"nivolumab\",   adr_s  = \"a_colitis\" ) #>      drug_s     adr_s pos_dch #> 1 nivolumab a_colitis      27 desc_dch(   link,   drug_s = c(\"nivolumab\", \"pembrolizumab\"),   adr_s  = c(\"a_colitis\", \"a_pneumonitis\") ) #>          drug_s         adr_s pos_dch #> 1     nivolumab     a_colitis      27 #> 2 pembrolizumab     a_colitis      19 #> 3     nivolumab a_pneumonitis      22 #> 4 pembrolizumab a_pneumonitis      26"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/descriptive.html","id":"rechallenge","dir":"Articles","previous_headings":"Link data: time to onset, dechallenge, rechallenge","what":"Rechallenge","title":"Descriptive","text":"Description span rechallenge cases informative rechallenge cases (cases outcome known). Drug Adr identifiers refer DrecNo MedDRA_Id, respectively. Terminology overall opposed rch rechallenged (rch + no_rch = overall). Among rch, inf (informative) opposed non_inf (inf + non_inf = rch) Among inf, rec (recurring) opposed non_rec (rec + non_rec = inf) number cases counted case level. desc_tto() desc_dch(), can query several drug - adr pairs . Columns passed arguments drug_s adr_s can correspond sets drugs events, even identify cases present dataset. Let’s say want know number positive rechallenge cases entire dataset must create variable takes value 1 cases. particular syntax, can access information","code":"desc_rch(   link,   drug_s = \"nivolumab\",   adr_s  = \"a_colitis\" ) #>       drug_s     adr_s n_overall n_rch n_inf n_rec #>       <char>    <char>     <int> <int> <int> <int> #> 1: nivolumab a_colitis        44    26    19    12 link <-   link |>    mutate(     all_cases = 1   ) desc_rch(   link,   drug_s = \"all_cases\",   adr_s  = \"all_cases\" ) #>       drug_s     adr_s n_overall n_rch n_inf n_rec #>       <char>    <char>     <int> <int> <int> <int> #> 1: all_cases all_cases       707   297   106    28"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Getting started","text":"subscribed VigiBase Extract Case Level, WHODrug MedDRA? Congratulations! ’ve made half way explore VigiBase. Now, need process large text/ascii files R readable files. purpose vignette.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"overview","dir":"Articles","previous_headings":"Purpose","what":"Overview","title":"Getting started","text":"tb_* functions (Table Builders) help process.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"folder-and-files","dir":"Articles","previous_headings":"Deploy tables","what":"Folder and files","title":"Getting started","text":"First, UNZIP files received UMC (beware also need unzip sub-folders, inside main zip file). give folder structure like : /vigibase_month_year (replace version) …/main …/…/sub Gather meddra files single folder, ideally close vigibase_month_year one. /meddra_vx (replace vx) Although names subfolders can longer (e.g. “main_sep_1_24”), strongly suggest shorten main, , sub Vigibase, meddra_vx MedDRA. Short names make code easier read maintain.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"table-builders-tb_-functions","dir":"Articles","previous_headings":"Deploy tables","what":"Table builders (tb_* functions)","title":"Getting started","text":"Provide path files computer. usually create path_* objects R, use functions. optional, can also pass path directly tb_* functions. Deploying table done per database version. New parquet files created directories provided path_*. suspectedduplicates table delivered subsidiary files, tb_vigibase() function output main directory, slightly modified name.","code":"library(vigicaen)  # change for the correct paths on your computer path_base   <- \"../vigibase_ecl/main\"  path_sub    <- \"../vigibase_ecl/sub\" path_who    <- \"../vigibase_ecl/who\" path_meddra <- \"../meddra\"  tb_vigibase(   path_base = path_base,    path_sub  = path_sub   )  tb_who(   path_who  = path_who   )  tb_meddra(   path_meddra = path_meddra   )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"outputs","dir":"Articles","previous_headings":"Deploy tables","what":"Outputs","title":"Getting started","text":"tb_* functions create parquet files. Parquet open-source format, supported Arrow. tables source created process. Main: tables + subsidiary tables (sub): demo, drug, adr, link, ind, srce, , followup, suspdup, AgeGroup, Dechallenge, Dechallenge2, Frequency, Gender, Notifier, Outcome, Rechallenge, Rechallenge2, Region, RepBasis, ReportType, RouteOfAdm, Seriousness, SizeUnit. WHODrug: tables: mp, thg, pp, ing, srce, org, ccode, atc, sun, pf, str, prg, prt, unitx. , check correspondence delivered files UMC. Meddra: meddra_hierarchy, smq_list, smq_content. mp modified comparison original file, drug names lowered case trimed, handy. columns also removed.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"loading-tables-into-r","dir":"Articles","previous_headings":"","what":"Loading tables into R","title":"Getting started","text":"can use arrow package built-readers load tables, dt_parquet() function package, shorthand data.table::.data.table(read_parquet()). Parquet files loaded memory, default. change behavior, remember set in_memory = FALSE. careful output format different.","code":"demo   <- dt_parquet(path_main, \"demo\") drug   <- dt_parquet(path_main, \"drug\") adr    <- dt_parquet(path_main, \"adr\") link   <- dt_parquet(path_main, \"link\") # etc.  mp     <- dt_parquet(path_who, \"mp\")  meddra <- dt_parquet(path_meddra, \"meddra_hierarchy\")"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"working-on-a-computer-with-low-specifications","dir":"Articles","previous_headings":"","what":"Working on a computer with low specifications","title":"Getting started","text":"main ressource store objects R RAM. computer don’t much RAM (e.g., 16GB), able load Vigibase tables session. case, can use in_memory argument dt_parquet() load tables memory. allow go data management steps. time statistical modelling, might need load table /use modelling packages rely RAM (one example: biglm)","code":"demo   <- dt_parquet(path_main, \"demo\", in_memory = FALSE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/getting_started.html","id":"subsetting-tables","dir":"Articles","previous_headings":"","what":"Subsetting tables","title":"Getting started","text":"want work specific subset VigiBase (e.g. older adults, specific drugs, adverse drug reaction), can create dedicated subset tb_subset() function. Currently, can subset Age groups Drug record numbers (DrecNo) Medicinal product IDs (MedicinalProd_Id) MedDRA codes adverse drug reactions (MedDRA_Id) Visit tb_subset() help page information. need collect drug reaction IDs want subset . See vignette(\"basic_workflow\").","code":"sv_selection <-     c(7, #  65 - 74 years group       8) #  >= 75 years group  wd_in <- \"some/place/on/your/computer/containing/vigibase_ecl/main\"  wd_out <- paste0(wd_in, \"/\", \"more_than_65_subset\", \"/\")  tb_subset(wd_in, wd_out,           subset_var = \"age\",           sv_selection = sv_selection)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/interactions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Interactions","text":"possible explore interactions drugs adr reporting. tutorial aim covering concepts underlying interactions pharmacovigilance. running practice. particular, cover differences additive interactions, statistical/synergistic interactions. compute_interaction() use shown end vignette. use built-example dataset.","code":"# ---- Tables ---- ####  demo <- demo_ drug <- drug_  # ---- Dictionary step ---- ####  d_drecno <- ex_$d_drecno a_llt <- ex_$a_llt  # #### Data management #### ####  # ---- Drugs ---- ####  demo <-     demo |>     add_drug(       d_code = d_drecno,       drug_data = drug_     )  #> ℹ `.data` detected as `demo` table.  # ---- Adrs ---- ####  demo <-    demo |>     add_adr(       a_code = a_llt,       adr_data = adr_     ) #> ℹ `.data` detected as `demo` table.  # ---- Sex ---- ####  demo <-    demo |>    mutate(     sex = case_when(Gender == \"1\" ~ 1,                     Gender == \"2\" ~ 2,                     TRUE ~ NA_real_)     )"},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/interactions.html","id":"multivariate-analysis","dir":"Articles","previous_headings":"Additive interactions","what":"Multivariate analysis","title":"Interactions","text":"Additive effect two covariates can obtained multiplying Odds-Ratio . reporting Odds-Ratio ipilimumab 2.00 reporting Odds-Ratio sex 1.06, additive effect 2.00 * 1.06.","code":"mod3 <- glm(a_colitis ~ ipilimumab + sex,             data = demo,             family = \"binomial\")  mod_or <-    compute_or_mod(   summary(mod3)$coefficients,       estimate = Estimate,     std_er = Std..Error   ) |> select(rn, orl, ci, up_ci)  mod_or #>             rn    orl          ci     up_ci #>         <char> <char>      <char>     <num> #> 1: (Intercept)   0.15 (0.08-0.28) 0.2830974 #> 2:  ipilimumab   2.00 (1.14-3.53) 3.5274694 #> 3:         sex   1.06 (0.69-1.62) 1.6167786"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/interactions.html","id":"subgroup-comparisons","dir":"Articles","previous_headings":"Additive interactions","what":"Subgroup comparisons","title":"Interactions","text":"way approach multiplicative interactions compare disproportionality signal subgroups. compute_dispro() function can used analyses, assuming initial dataset filtered appropriate subgroup. Say want investigate interaction ipilimumab nivolumab colitis reporting. overall analysis implies perform additional analysis different settings. example: ipilimumab alone leads overreporting colitis nivolumab, among ipilimumab cases, leads overreporting colitis combination ipilimumab + nivolumab versus control (whole dataset) increases notifications colitis. IC ROR can used .","code":"demo |>    filter(nivolumab == 1) |>    compute_dispro(     y = \"a_colitis\",     x = \"ipilimumab\"     ) #> # A tibble: 1 × 9 #>   y         x          n_obs n_exp or    or_ci          ic ic_tail ci_level #>   <chr>     <chr>      <dbl> <dbl> <chr> <chr>       <dbl>   <dbl> <chr>    #> 1 a_colitis ipilimumab    18  11.5 2.36  (1.18-4.73) 0.620  -0.123 95%"},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/interactions.html","id":"logistic-regression-model","dir":"Articles","previous_headings":"Statistical interactions","what":"Logistic regression model","title":"Interactions","text":"true statistical interaction obtained following model","code":"mod4 <- glm(a_colitis ~ ipilimumab + sex + ipilimumab * sex,             data = demo,             family = \"binomial\")  compute_or_mod(   summary(mod4)$coefficients,   estimate = Estimate,   std_er = Std..Error ) #>                rn   Estimate Std..Error   z.value     Pr...z..         or #>            <char>      <num>      <num>     <num>        <num>      <num> #> 1:    (Intercept) -2.2464633  0.3632657 -6.184077 6.246672e-10  0.1057727 #> 2:     ipilimumab  2.7892022  0.8927900  3.124141 1.783247e-03 16.2680357 #> 3:            sex  0.2910744  0.2363515  1.231532 2.181241e-01  1.3378641 #> 4: ipilimumab:sex -1.4905928  0.6289493 -2.369973 1.778940e-02  0.2252391 #>        low_ci      up_ci    orl           ci ci_level signif_ror #>         <num>      <num> <char>       <char>   <char>      <num> #> 1: 0.05189925  0.2155687   0.11  (0.05-0.22)      95%          0 #> 2: 2.82742376 93.6007499  16.27 (2.83-93.60)      95%          1 #> 3: 0.84183934  2.1261543   1.34  (0.84-2.13)      95%          0 #> 4: 0.06565701  0.7726920   0.23  (0.07-0.77)      95%          0"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/interactions.html","id":"compute_int","dir":"Articles","previous_headings":"Statistical interactions","what":"Bayesian Information Component, compute_interaction()","title":"Interactions","text":"formula interaction 3 variables (yy, event interest, x1x1 x2x2, two potential explanatory factors) information component log2ny,x1,x2n.expectedinteractionlog_2\\frac{n_{y, x1, x2}}{n.expected_{interaction}} n.expectedinteractionn.expected_{interaction} equal nx1,x2*ny,x1*ny,x2*n.totalnx1*nx2*ny\\frac{n_{x1, x2} * n_{y, x1} * n_{y, x2} * n.total}{n_{x1} * n_{x2} * n_y} parameters read follows credibility interval calculated usual IC. compute_interaction() produces interaction statistic.","code":"demo |>   compute_interaction(     y = \"a_colitis\",     x = \"ipilimumab\",     z = \"nivolumab\"   ) #> # A tibble: 1 × 8 #>   y         x          z         n_obs n_exp    ic ic_tail ci_level #>   <chr>     <chr>      <chr>     <dbl> <dbl> <dbl>   <dbl> <chr>    #> 1 a_colitis ipilimumab nivolumab    18  7.88  1.14   0.400 95%"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Routine pharmacovigilance","text":"aim vignette describe use vigicaen context routine pharmacovigilance. hurry? Check condensed script vignette vignette(\"template_routine\"). standard user vignette : pharmacovigilance practitioner Interested R, necessarily willing become R expert, data management expert. Working pharmacovigilance case, seeking additional data, improve /case report: Disproportionality Estimates, possibly refined certain context, time drug initiation reaction onset. Meeting criteria? vignette !","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"the-whole-game","dir":"Articles","previous_headings":"","what":"The whole game","title":"Routine pharmacovigilance","text":"idea reduce minimum steps get data VigiBase. Load VigiBase data R Identify drug reaction interest Run vigi_routine() Save results, order insert pharmacovigilance report. vigi_routine() intended cornerstone function workflow. use following example: Say physician reported case colitis ipilimumab. like know reporting association colitis ipilimumab, like analyze time onset. Obviously, first part interesting association colitis ipilimumab well established.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"load-tables","dir":"Articles","previous_headings":"","what":"Load tables","title":"Routine pharmacovigilance","text":"haven’t already, build tables R compatible format, using tb_vigibase() tb_who() functions. information can found vignette(\"getting_started\"). rather long step must done per database version. , need set paths tables, use dt_parquet(). Load tables R. Preferably, let memory, especially computer rather low specifications (e.g., 16GB RAM). vignette, use built-example tables instead.","code":"path_base   <- \"~/vigibase/main/\" path_who    <- \"~/vigibase/who/\" path_meddra <- \"~/meddra/\" demo <- dt_parquet(path_base, \"demo\", in_memory = FALSE) drug <- dt_parquet(path_base, \"drug\", in_memory = FALSE) adr  <- dt_parquet(path_base, \"adr\", in_memory = FALSE) link <- dt_parquet(path_base, \"link\", in_memory = FALSE)  mp <- dt_parquet(path_who,  \"mp\") meddra   <- dt_parquet(path_meddra, \"meddra\") demo     <- demo_ adr      <- adr_ drug     <- drug_ link     <- link_  mp <- mp_ meddra   <- meddra_"},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"select-the-drug-and-reaction","dir":"Articles","previous_headings":"Identify drug and reaction of interest","what":"Select the drug and reaction","title":"Routine pharmacovigilance","text":"First, create named lists drug reaction interest. exactly similar vignette(\"basic_workflow\"). working vigicaen, always need tell R drug reaction interested . , create d_sel object, list, one item. item name ipilimumab, content item “ipilimumab”. goes a_sel. Use lower case drugs: Good : “ipilimumab”, Wrong : “Ipilimumab”, “IPILIMUMAB” Mind capital letter beginning reactions (“Colitis”): must match exactly MedDRA term reaction. d_sel must contains “active ingredient”, international non-proprietary name, majority cases. a_sel must contain MedDRA term, can either Preferred Term, Term level MedDRA. also SMQ. order use vigi_routine(), d_sel a_sel must contain one, one, item .","code":"d_sel <- list(   ipilimumab = \"ipilimumab\" )  a_sel <- list(   # this is a High Level Term   colitis = \"Colitis (excl infective)\" )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"collect-ids-of-drug-and-reaction","dir":"Articles","previous_headings":"Identify drug and reaction of interest","what":"Collect IDs of drug and reaction","title":"Routine pharmacovigilance","text":"get_* functions family let convert terms IDs, can used VigiBase tables. drugs, need get DrecNos (Drug Record Numbers). reactions, need low-level term codes. example, use get_drecno() get_llt_soc(). Feel free browse get_* functions: get_llt_smq(), get_atc_code().","code":"d_code <-    get_drecno(d_sel, mp = mp) #>  #> ── get_drecno() ──────────────────────────────────────────────────────────────── #>  #> ── `d_sel`: Matching drugs ── #>  #> ── ✔ Matched drugs #>  #> → `ipilimumab`: \"ipilimumab\" and \"ipilimumab;nivolumab\" #>  #>  #> ℹ Set `verbose` to FALSE to suppress this section. #>  #>  #>  #> ────────────────────────────────────────────────────────────────────────────────  a_code <-   get_llt_soc(a_sel, term_level = \"hlt\", meddra = meddra) #>  #> ── get_llt_soc() ─────────────────────────────────────────────────────────────── #>  #> ── ✔ Matched reactions at `hlt` level (number of codes) ── #>  #> → `colitis`: \"Colitis (excl infective) (39)\" #> ℹ Set `verbose` to FALSE to suppress this section."},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"use-vigi_routine","dir":"Articles","previous_headings":"","what":"Use vigi_routine()","title":"Routine pharmacovigilance","text":"’re almost done, last thing need run vigi_routine(). takes several arguments: demo_data, drug_data, adr_data, link_data: tables loaded earlier (demo, drug, adr, link) d_code, a_code: IDs drug reaction interest vigibase_version: ’s character string printed graph legend. can use anything, “September 2024”. Just remember write something.  Lets take look results. several sections. number cases: displays number cases drug suspected, interacting, concomitant. Data displayed bar charts numerically. Rechallenge: Number informative rechallenges (.e., rechallenges outcome known). ’s displayed cases found. disproportionality analysis, using Information Component. color scale purely indicative considered standard. time onset analysis. shows distribution time onset drug initiation (, ipilimumab), reaction onset (colitis). scale log-transformed, span 1 day … 10 years! pale blue sustained blue bars bottom indicate number limits 50% 80% patients fall. can roughly see 50% patients time onset comprised ~1.5 month 1 year. second graph uses cases drug suspected responsible reaction.","code":"vigi_routine(   demo_data = demo,   drug_data = drug,   adr_data  = adr,   link_data = link,   d_code    = d_code,   a_code    = a_code,   vigibase_version = \"September 2024\" )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"add-your-own-case-time-to-onset","dir":"Articles","previous_headings":"Use vigi_routine()","what":"Add your own case time to onset","title":"Routine pharmacovigilance","text":"said earlier, working case reported physician. case, colitis happened 150days ipilimumab initiation. can add information graph, using case_tto argument.","code":"vigi_routine(   case_tto  = 150,   demo_data = demo,   drug_data = drug,   adr_data  = adr,   link_data = link,   d_code    = d_code,   a_code    = a_code,   vigibase_version = \"September 2024\" )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"customize-the-graph","dir":"Articles","previous_headings":"Use vigi_routine()","what":"Customize the graph","title":"Routine pharmacovigilance","text":"options customize output graph. can use d_label a_label arguments change display legend.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/routine_pharmacovigilance.html","id":"exporting-your-results","dir":"Articles","previous_headings":"Use vigi_routine()","what":"Exporting your results","title":"Routine pharmacovigilance","text":"can save results vigi_routine() separate file, using export_to argument. export_to must character string, indicating path computer want file saved. must end one following extensions: “.eps”, “.ps”, “.tex” (pictex), “.pdf”, “.jpeg”, “.tiff”, “.png”, “.bmp”, “.svg” “.wmf” (windows ) extensions (like .svg) require additional packages work. (e.g. svglite “.svg”).","code":"vigi_routine(   case_tto  = 150,   demo_data = demo,   drug_data = drug,   adr_data  = adr,   link_data = link,   d_code    = d_code,   a_code    = a_code,   d_label   = \"Ipilimumab\",   a_label   = \"Colitis (HLT)\",   vigibase_version = \"September 2024\",   export_to = \"~/vigicaen_graph.png\" )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/template_dictionary.html","id":"dictionary-script-template","dir":"Articles","previous_headings":"","what":"Dictionary script template","title":"Dictionary","text":"may want organize research folder using small scripts, designed part analysis plan. Inspired Reproducible Research R /folder ../data ../scripts ../etc. dictionary might located scripts, name “dict.R”. ../scripts/00_dict.R haven’t, visit vignette(\"getting_started\") vignette(\"basic_workflow\") details template .","code":"library(vigicaen) library(rlang) library(dplyr) # #### PATHS #### ####  path_who    <- \"../vigibase_ecl/who\" # adapt to your own  path_meddra <- \"../meddra\"   # #### IMPORT #### ####  # ---- Datasets ---- ####  mp     <- dt_parquet(path_who, \"mp\")  thg    <- dt_parquet(path_who, \"thg\")  meddra <- dt_parquet(path_meddra, \"meddra_hierarchy\")  smq_list <- dt_parquet(path_meddra, \"meddra_smq_list\")  smq_content <- dt_parquet(path_meddra, \"meddra_smq_content\") # #### Drug definitions #### ####  d_sel <-   list(     nivolumab = \"nivolumab\", # use lower case     ici = c(\"nivolumab\", \"pembrolizumab\")   )  # ---- ID collector  d_drecno <-   d_sel |>   get_drecno(     mp = mp   )  # #### ATC definitions #### ####  atc_sel <-   list(l03 = \"L03\") # ATC code  # ---- ID collector  atc_drecno <-   atc_sel |>   get_atc_code(     mp = mp,     thg_data = thg   )  # #### ADR definitions #### ####  # adr selection, matching meddra case  # ---- SOC definition  pt_sel <-   list(     hepatitis = c(\"Hepatitis\", \"Budd-Chiari syndrome\"),     hyponatremia = c(\"Pneumonitis\")   )  hlt_sel <-   list(     conduction = \"Diarrhoea (excl infective)\"   )  # ---- SMQ definition  smq_sel <-   list(     hta = \"Ischaemic heart disease (SMQ)\"   )  # ---- ID collectors  a_llt <-   c(     get_llt_soc(pt_sel,                 term_level = \"pt\",                 meddra = meddra),     get_llt_soc(hlt_sel,                 term_level = \"hlt\",                 meddra),     get_llt_smq(smq_sel,                 smq_scope =  \"narrow\",                 smq_list,                 smq_content)   )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/template_main.html","id":"main-data-management-and-disproportionality-script-template","dir":"Articles","previous_headings":"","what":"Main (data management and disproportionality) script template","title":"Data management and disproportionality","text":"may want organize research folder using small scripts, designed part analysis plan. Inspired Reproducible Research R /folder ../data ../scripts ../etc. main script might located scripts, name “main.R”. ../scripts/01_main.R haven’t, visit vignette(\"getting_started\"), vignette(\"basic_workflow\") vignette(\"descriptive\") details template .","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/template_main.html","id":"paths","dir":"Articles","previous_headings":"Main (data management and disproportionality) script template","what":"Paths","title":"Data management and disproportionality","text":"may create separate script paths, call beginning main script.","code":"library(vigicaen) library(rlang) library(here) # if you like the here syntax for file paths library(dplyr) # #### PATHS #### ####  path_base   <- \"../vigibase_ecl/main\"  # #### IMPORT #### ####  demo     <- dt_parquet(path_base, \"demo\", in_memory = FALSE) adr      <- dt_parquet(path_base, \"adr\",  in_memory = FALSE) drug     <- dt_parquet(path_base, \"drug\", in_memory = FALSE) link     <- dt_parquet(path_base, \"link\", in_memory = FALSE) out      <- dt_parquet(path_base, \"out\",  in_memory = FALSE) srce     <- dt_parquet(path_base, \"srce\", in_memory = FALSE) followup <- dt_parquet(path_base, \"followup\", in_memory = FALSE)  suspdup  <- dt_parquet(path_base, \"suspdup\", in_memory = FALSE)  source(\"00_dict.R\") # from template_dictionary"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/template_main.html","id":"demo","dir":"Articles","previous_headings":"Main (data management and disproportionality) script template","what":"Demo","title":"Data management and disproportionality","text":"","code":"# ---- Deduplicating ---- ####  demo <- demo |>    filter(!(UMCReportId %in% suspdup$SuspectedduplicateReportId))  # ---- Drugs ---- ####  # From a list of drugs  demo <-   demo |>   add_drug(     d_code = d_drecno,     drug_data = drug   )  # From ATC  demo <-   demo |>   add_drug(     d_code = atc_drecno,     drug_data = drug   )  # ---- Reactions ---- ####  demo <-   demo |>   add_adr(     a_code = a_llt,     adr_data = adr   )  # ---- Demographics ---- ####  # Age, sex  demo <-   demo |>   mutate(     age = cut(as.integer(AgeGroup),               breaks = c(0,4,5,6,7,8),               include.lowest = TRUE, right = TRUE,               labels = c(\"<18\", \"18-45\",\"45-64\", \"65-74\", \"75+\")),      sex = case_when(Gender == \"1\" ~ 1,                     Gender == \"2\" ~ 2,                     Gender %in% c(\"-\",\"0\",\"9\") ~ NA_real_,                     TRUE ~ NA_real_)   )  # Death + outcome availability  demo <-    demo |>    mutate(death =             ifelse(UMCReportId %in% out$UMCReportId,                   UMCReportId %in%                      (out |>                      filter(Seriousness == \"1\") |>                      pull(UMCReportId)                     ),                   NA)          )  # follow-up, seriousness  demo <-   demo |>   mutate(     fup = if_else(UMCReportId %in% followup$UMCReportId, 1, 0),     serious =        ifelse(         UMCReportId %in% out$UMCReportId,         UMCReportId %in%            (out |>            filter(Serious == \"Y\") |>            pull(UMCReportId)           ),         NA)   )  # year  demo <-    demo |>    mutate(     year = as.numeric(substr(FirstDateDatabase, start = 1, stop = 4))     )  # type of reporter  demo <-   demo |>   left_join(     srce |> transmute(UMCReportId, type_reporter = Type),     by = \"UMCReportId\")  # explicit multi-level vars  demo <-   demo |>    mutate(     Type = factor(Type, levels = c(\"1\", \"2\", \"3\", \"4\", \"5\")),     type_reporter = factor(type_reporter,                            levels = c(\"1\", \"2\", \"3\", \"4\", \"5\")),     Region = factor(Region, levels = c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"))   )  levels(demo$Type) <-   c(\"Spontaneous\",                           \"Report from study\",                              \"Other\",         \"Not available to sender (unknown)\",         \"PMS/Special monitoring\")  levels(demo$type_reporter) <-   c(\"Physician\",     \"Pharmacist\",     \"Other Health Professional\",     \"Lawyer\",     \"Consumer or other non health professional\")  levels(demo$Region) <-   c(\"African Region\",                                         \"Region of the Americas\",                                 \"South-East Asia Region\",                                 \"European Region\",                                        \"Eastern Mediterranean Region\",                           \"Western Pacific Region\"     )  # ---- Check ---- ####  demo |>   check_dm(cols = c(names(d_drecno), names(a_llt), \"fup\")) #>               [,1] #> ipilimumab      86 #> atezolizumab    69 #> durvalumab      68 #> nivolumab      225 #> pembrolizumab  298 #> avelumab        43 #> cemiplimab      27 #> tremelimumab    27 #> a_embolism       9 #> a_colitis      104 #> a_pneumonitis  103 #> fup            292"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/template_main.html","id":"link","dir":"Articles","previous_headings":"Main (data management and disproportionality) script template","what":"Link","title":"Data management and disproportionality","text":"","code":"link <-   link |>      add_drug(       d_code = d_drecno,       drug_data = drug     ) |>      add_adr(       a_code = a_llt,       adr_data = adr     )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/template_main.html","id":"basic-models","dir":"Articles","previous_headings":"Main (data management and disproportionality) script template","what":"Basic models","title":"Data management and disproportionality","text":"","code":"# ---- Bivariate ---- ####  rb <-    demo |>    compute_dispro(     y = names(a_llt),     x = names(d_drecno)   )  # remove the hashes to save your results ## write.csv2(rb, here(\"outputs\", \"rb.csv\"), row.names = FALSE)  # ---- Multivariate ---- ####  mod <-   glm(a_colitis ~ nivolumab + age + sex,       family = \"binomial\",       data = demo)  rm <-   summary(mod)$coefficients |>   compute_or_mod(     estimate = Estimate,     std_er = Std..Error     )  # remove the hashes to save your results ## write.csv2(rm, here(\"outputs\", \"rm.csv\"), row.names = FALSE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/articles/template_main.html","id":"basic-descriptive","dir":"Articles","previous_headings":"Main (data management and disproportionality) script template","what":"Basic descriptive","title":"Data management and disproportionality","text":"","code":"# ---- General description ---- ####  r_desc <-    demo |>    desc_facvar(     vf = c(\"age\", \"sex\",            \"type_reporter\",            \"Type\",            \"year\",            names(d_drecno),            names(a_llt),            \"serious\", \"death\"),     ncat_max = 20   )  # ---- Time to onset ---- ####  r_tto <-   desc_tto(     link,     adr_s = names(a_llt),     drug_s = names(d_drecno)     )   # ---- Dechallenge ---- ####  r_dch <-   desc_dch(     link,     adr_s = names(a_llt),     drug_s = names(d_drecno)     )  # ---- Rechallenge ---- ####  r_rch <-   desc_rch(     link,     adr_s = names(a_llt),     drug_s = names(d_drecno)   )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charles Dolladille. Author, maintainer. Basile Chrétien. Author. Universite de Caen Normandie. Copyright holder.           Caen, France Unite de pharmaco-epidemiologie. Copyright holder.           Service de pharmacologie, Centre Hospitalier Universitaire de Caen, Caen, France","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dolladille C, Chrétien B (2025). vigicaen: 'VigiBase' Pharmacovigilance Database Toolbox. R package version 0.15.6, https://pharmacologie-caen.github.io/vigicaen/, https://github.com/pharmacologie-caen/vigicaen.","code":"@Manual{,   title = {vigicaen: 'VigiBase' Pharmacovigilance Database Toolbox},   author = {Charles Dolladille and Basile Chrétien},   year = {2025},   note = {R package version 0.15.6, https://pharmacologie-caen.github.io/vigicaen/},   url = {https://github.com/pharmacologie-caen/vigicaen}, }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"vigicaen-","dir":"","previous_headings":"","what":"VigiBase Pharmacovigilance Database Toolbox","title":"VigiBase Pharmacovigilance Database Toolbox","text":"Visit package website goal vigicaen provide tools analyze VigiBase Extract Case Level. VigiBase World Health Organization’s () global pharmacovigilance database individual case safety reports. maintained Uppsala Monitoring Centre Sweden. package supported reflects opinion , Uppsala Monitoring Centre.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"VigiBase Pharmacovigilance Database Toolbox","text":"Users assumed familiar pharmacovigilance analysis principles. useful resources can found (English) (French). vigicaen R package, need R installed computer, optionally RStudio. Use VigiBase Extract Case Level subsequent WHODrug data requires license Uppsala Monitoring Centre. Use MedDRA requires license MedDRA. note, academic researchers provided accommodations licenses.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"technical-requisites","dir":"","previous_headings":"Prerequisites","what":"Technical requisites","title":"VigiBase Pharmacovigilance Database Toolbox","text":"Vigibase ECL tables large, computer must meet following requirements: Free disk space least 50GB least 16GB RAM old processor (partial tests conducted 2019 Intel 7, recent 2023 AMD Ryzen 3)","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"target-users","dir":"","previous_headings":"","what":"Target users","title":"VigiBase Pharmacovigilance Database Toolbox","text":"2 types users package aimed : Routine pharmacovigilance practitioners. users may familiar R, statistics general. like collect additional data, writing pharmacovigilance reports, working reported case (information component, reaction time onset). users interested “Routine pharmacovigilance” vignette, vignette(\"routine_pharmacovigilance\"). Advanced pharmacovigilance researchers. users must familiar R (bit ) statistics. find tools load tables, perform usual data management, identify drug reaction IDs, describe complexe features (dechallenge, rechallenge), perform disproportionality, get ready--use datasets apply regression machine learning algorithm.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"solution-1","dir":"","previous_headings":"Installation","what":"Solution 1","title":"VigiBase Pharmacovigilance Database Toolbox","text":"CRAN install.packages(\"vigicaen\") Development version GitHub devtools::install_github(\"pharmacologie-caen/vigicaen\")","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"solution-2","dir":"","previous_headings":"Installation","what":"Solution 2","title":"VigiBase Pharmacovigilance Database Toolbox","text":"Find latest Released version Download source code tar.gz file. use RStudio, click “Tools”, “Install Packages…”, select “Package Archive file” locate tar.gz file computer. Alternatively, can use following command R: install.packages(\"path//vigicaen_X.XX.X.tar.gz\", repos = NULL, type = \"source\")","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"VigiBase Pharmacovigilance Database Toolbox","text":"Visit package website Good places start journey: Set stage vignette(\"getting_started\") Explore vigibase vignette(\"routine_pharmacovigilance\") Dive advanced features vignette(\"basic_workflow\")","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"example-pv---routine","dir":"","previous_headings":"","what":"Example","title":"VigiBase Pharmacovigilance Database Toolbox","text":"working colitis case reported 80 days ipilimumab initiation. like know information component (possibly restricted specific population, e.g. older adults), time onset reported reaction.","code":"library(vigicaen)  # Step 1: Load datasets (or use example sets # as shown below)  demo   <- demo_ adr    <- adr_ drug   <- drug_ link   <- link_ mp     <- mp_ meddra <- meddra_  # Step 2: Pick a drug and a reaction  d_code <-    list(     ipilimumab = \"ipilimumab\"   ) |>    get_drecno(mp = mp)  a_code <-   list(     colitis = \"Colitis (excl infective)\"   ) |>    get_llt_soc(term_level = \"hlt\", meddra = meddra)  # Step 3: Plot results  vigi_routine(   case_tto  = 80, # your case   demo_data = demo,   drug_data = drug,   adr_data  = adr,   link_data = link,   d_code    = d_code,   a_code    = a_code,   vigibase_version = \"September 2024\" )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/index.html","id":"example-pv---advanced","dir":"","previous_headings":"","what":"Example","title":"VigiBase Pharmacovigilance Database Toolbox","text":"want perform disproportionality analysis nivolumab exposure colitis reporting (reporting odds-ratio information component ic).","code":"library(vigicaen)  demo <-   demo_ |>    add_drug(     d_code = ex_$d_drecno,     drug_data = drug_   ) |>    add_adr(     a_code = ex_$a_llt,     adr_data = adr_   )  demo |>    compute_dispro(     y = \"a_colitis\",     x = \"nivolumab\"   ) #> # A tibble: 1 × 9 #>   y         x         n_obs n_exp or    or_ci          ic ic_tail ci_level #>   <chr>     <chr>     <dbl> <dbl> <chr> <chr>       <dbl>   <dbl> <chr>    #> 1 a_colitis nivolumab    44  31.2 1.88  (1.23-2.88) 0.489  0.0314 95%"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_adr.html","id":null,"dir":"Reference","previous_headings":"","what":"Add ADR column(s) to a dataset — add_adr","title":"Add ADR column(s) to a dataset — add_adr","text":"Creates adr columns vigibase datasets (demo, link, drug, also adr).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_adr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add ADR column(s) to a dataset — add_adr","text":"","code":"add_adr(   .data,   a_code,   a_names = names(a_code),   adr_data,   data_type = deprecated() )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_adr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add ADR column(s) to a dataset — add_adr","text":".data dataset update (demo, link, drug, adr). a_code named list low level terms codes (llt_codes). a_names character vector. Names adr columns (must length adr_list), default names(a_code) adr_data data.frame containing adr data (usually, adr) data_type . Data_type now detected internally.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_adr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add ADR column(s) to a dataset — add_adr","text":"dataset new adr columns. element a_names add column name .data. value can 0 (corresponding adr absent) 1 (adr present case .data demo drug, \"row correspond adr\", .data adr link).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_adr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add ADR column(s) to a dataset — add_adr","text":"Low-level term codes preferred level requesting Vigibase extract case level since capture possible codes given Preferred Term. Collect low-level terms get_llt_soc() get_llt_smq(). can add adr identification demo, link, drug even adr dataset (latter case, must provide adr twice, .data adr_data). Column names dataset modified original vigibase dataset (created tb_vigibase()).","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_adr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add ADR column(s) to a dataset — add_adr","text":"","code":"# create adr_colitis, adr_embolism and adr_pneumonitis columns in demo  # be careful, this example may overwrite your own demo dataset demo <- demo_  a_pt_sel <- ex_$pt_sel   adr <- adr_  a_llt <-   get_llt_soc(   term_sel = a_pt_sel,   term_level = \"pt\",   meddra = meddra_   ) #>  #> ── get_llt_soc() ─────────────────────────────────────────────────────────────── #>  #> ── ✔ Matched reactions at `pt` level (number of codes) ── #>  #> → `colitis`: \"Autoimmune colitis (1)\", \"Colitis (25)\", \"Colitis microscopic #>   (3)\", \"Diarrhoea (53)\", \"Diarrhoea haemorrhagic (8)\", \"Duodenitis (5)\", #>   \"Enteritis (8)\", \"Enterocolitis (4)\", \"Enterocolitis haemorrhagic (10)\", and #>   \"Ulcerative gastritis (1)\" #> → `pneumonitis`: \"Organising pneumonia (9)\" and \"Pneumonitis (6)\" #>  #> ℹ Set `verbose` to FALSE to suppress this section. #>   demo <-   demo |>     add_adr(       a_code = a_llt,       adr_data = adr     ) #> ℹ `.data` detected as `demo` table.  demo |>   check_dm(names(a_pt_sel)) #>             [,1] #> colitis      104 #> pneumonitis  103"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_drug.html","id":null,"dir":"Reference","previous_headings":"","what":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","title":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","text":"Creates drug columns. vigibase datasets (demo, link, adr, also drug).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_drug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","text":"","code":"add_drug(   .data,   d_code,   d_names = names(d_code),   repbasis = \"sci\",   method = c(\"DrecNo\", \"MedicinalProd_Id\"),   drug_data,   data_type = deprecated() )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_drug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","text":".data dataset used identify individual reports (usually, demo) d_code named list drug codes (DrecNos MPI). See Details. d_names character vector. Names drug columns (must length d_code), default names(d_code) repbasis Suspect, interacting /concomitant. Type initial wish select (\"s\" suspect, \"c\" concomitant \"\" interacting ; default , e.g. \"sci\"). method character string. type drug code (DrecNo MedicinalProd_Id). See details. drug_data data.frame containing drug data (usually, drug) data_type . Data_type now detected internally.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_drug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","text":"dataset new drug columns. element d_names add column name .data. value can 0 (corresponding drug absent) 1 (drug present case .data demo adr, \"row correspond drug\", .data drug link).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_drug.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","text":"d_code named list containing drug codes. Either drug record numbers (e.g., get_drecno()), medicinalprod_ids (e.g., get_atc_code()). Default method DrecNos.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_drug.html","id":"argument-repbasis","dir":"Reference","previous_headings":"","what":"Argument repbasis","title":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","text":"Drugs can reported according one three reputation bases: s suspect c concomitant interacting occurrence adverse drug reaction. study one reputation basis, type corresponding letter repbasis, e.g. \"s\" suspects, \"si\" suspect interacting. can add drug identification demo, link, adr even drug dataset.(latter case, must provide adr twice, .data drug_data)","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/add_drug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add DRUG column(s) to a dataset (tidyverse syntax) — add_drug","text":"","code":"# create a nivolumab column in demo_  d_sel_names <- list(nivolumab = \"nivolumab\")  d_drecno <- get_drecno(d_sel_names,                         mp = mp_) #>  #> ── get_drecno() ──────────────────────────────────────────────────────────────── #>  #> ── `d_sel`: Matching drugs ── #>  #> ── ✔ Matched drugs  #>  #> → `nivolumab`: \"nivolumab\" and \"ipilimumab;nivolumab\" #>  #> ℹ Set `verbose` to FALSE to suppress this section. #>  #> ──────────────────────────────────────────────────────────────────────────────── demo_ <-   add_drug(     .data = demo_,     d_code = d_drecno,     method = \"DrecNo\",     repbasis = \"sci\",     drug_data = drug_   ) #> ℹ `.data` detected as `demo` table.  # remember to assign the result to your actual demo dataset  # do you want to work only with cases where nivolumab was a \"suspected\" drug? # change argument repbasis to \"s\"  demo_ <-   add_drug(     .data = demo_,     d_code = d_drecno,     d_names = \"nivolumab_suspected\",     method = \"DrecNo\",     repbasis = \"s\",     drug_data = drug_   ) #> ℹ `.data` detected as `demo` table.  check_dm(demo_, cols = c(\"nivolumab\", \"nivolumab_suspected\")) #>                     [,1] #> nivolumab            225 #> nivolumab_suspected  214"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/cff.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast formatting of numbers — cff","title":"Fast formatting of numbers — cff","text":"formatting function consistent number reporting.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/cff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast formatting of numbers — cff","text":"","code":"cff(num, low_ci, up_ci, dig = 0, method = c(\"num_only\", \"num_ci\", \"ci\"))"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/cff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast formatting of numbers — cff","text":"num numeric. number format. low_ci numeric. Lower end confidence interval up_ci numeric. Upper end confidence interval dig numeric. Number digits method sort printing need? (see Details)","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/cff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast formatting of numbers — cff","text":"character vector formatted number(s)","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/cff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast formatting of numbers — cff","text":"Set method according printing like: unique number num_only (default), number confidence interval num_ci, ci (example range time onset) function properly returns NA input missing.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/cff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast formatting of numbers — cff","text":"","code":"num <- c(0.1, 0.02, 1.658)  cff(num) #> [1] \"0\" \"0\" \"2\"  cff(num, dig = 2) #> [1] \"0.10\" \"0.02\" \"1.66\"  cff(num = num[[1]],      low_ci = num[[2]],      up_ci = num[[3]],      method = \"num_ci\",      dig = 2) #> [1] \"0.10 (0.02-1.66)\""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/check_dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Check binary variables — check_dm","title":"Check binary variables — check_dm","text":"Quick check data management steps add_adr add_drug found cases.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/check_dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check binary variables — check_dm","text":"","code":"check_dm(.data, cols)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/check_dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check binary variables — check_dm","text":".data data.frame checked cols character vector, name columns look (usually d_names, a_names)","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/check_dm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check binary variables — check_dm","text":"transposed data.frame, row.names equal cols, first column number lines .data col equal 1.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/check_dm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check binary variables — check_dm","text":"simple wrapper around dplyr::summarise(). careful supply factors > 2 levels continuous outcome (function checker , faster). Also, function WONT work NAs. Use desc_facvar(). need detailed description dataset.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/check_dm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check binary variables — check_dm","text":"","code":"# first create some new variables  demo <- demo_  demo <-   demo |>     add_adr(       a_code = ex_$a_llt,       adr_data = adr_     ) #> ℹ `.data` detected as `demo` table.   # then check the number of reports with each feature  demo |>   check_dm(names(ex_$a_llt)) #>               [,1] #> a_embolism       9 #> a_colitis      104 #> a_pneumonitis  103"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_dispro.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute disproportionality — compute_dispro","title":"Compute disproportionality — compute_dispro","text":"Computes bivariate (reporting) Odds-Ratio Information Component drug-adr pair.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_dispro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute disproportionality — compute_dispro","text":"","code":"compute_dispro(   .data,   y,   x,   alpha = 0.05,   na_format = \"-\",   dig = 2,   export_raw_values = FALSE,   min_n_obs = 0 )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_dispro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute disproportionality — compute_dispro","text":".data data.table compute . y character vector, one variable explain (usually adr). x character vector, one explaining variable (usually drug). alpha Alpha risk. na_format Character string fill NA values ror ci legends. dig Number digits rounding (argument passed cff) export_raw_values logical. raw values exported? min_n_obs numeric, compute disproportionality pairs least min_n_obs cases.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_dispro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute disproportionality — compute_dispro","text":"data.table, ROR, IC, confidence/credibility interval (1 - alpha). Significance (signif_or signif_ic, export_raw_values TRUE). data.table columns y x, input n_obs number observed cases n_exp number expected cases orl formatted Odds-Ratio or_ci formatted confidence interval ic Information Component ic_tail tail probability IC ci_level confidence interval level Additional columns, export_raw_values TRUE: , b, c, d counts contingency table std_er standard error log() Odds-Ratio low_ci lower bound confidence interval up_ci upper bound confidence interval signif_or significance Odds-Ratio signif_ic significance Information Component","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_dispro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute disproportionality — compute_dispro","text":"Significance pharmacovigilance analysis defined lower bound confidence/credibility interval 1 (.e. low_ci > 1, ic_tail > 0). Actually, function computes Odds-Ratio, necessarily reporting Odds-Ratio.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_dispro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute disproportionality — compute_dispro","text":"","code":"# Say you want to perform a disproportionality analysis between colitis and # nivolumab among ICI cases  demo <-   demo_ |>   add_drug(     d_code = ex_$d_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `demo` table. #> ℹ `.data` detected as `demo` table.  demo |>   compute_dispro(     y = \"a_colitis\",     x = \"nivolumab\"   ) #> # A tibble: 1 × 9 #>   y         x         n_obs n_exp or    or_ci          ic ic_tail ci_level #>   <chr>     <chr>     <dbl> <dbl> <chr> <chr>       <dbl>   <dbl> <chr>    #> 1 a_colitis nivolumab    44  31.2 1.88  (1.23-2.88) 0.489  0.0314 95%       # You don't have to use the pipe syntax, if you're not familiar  compute_dispro(     .data = demo,     y = \"a_colitis\",     x = \"nivolumab\"   ) #> # A tibble: 1 × 9 #>   y         x         n_obs n_exp or    or_ci          ic ic_tail ci_level #>   <chr>     <chr>     <dbl> <dbl> <chr> <chr>       <dbl>   <dbl> <chr>    #> 1 a_colitis nivolumab    44  31.2 1.88  (1.23-2.88) 0.489  0.0314 95%        # Say you want to compute more than one univariate ror at a time.  many_drugs <-   names(ex_$d_drecno)  demo |>   compute_dispro(     y = \"a_colitis\",     x = many_drugs   ) #> # A tibble: 8 × 9 #>   y         x             n_obs n_exp or    or_ci           ic  ic_tail ci_level #>   <chr>     <chr>         <dbl> <dbl> <chr> <chr>        <dbl>    <dbl> <chr>    #> 1 a_colitis ipilimumab       20 11.9  2.09  (1.21-3.6…  0.722    0.0210 95%      #> 2 a_colitis atezolizumab      7  9.57 0.68  (0.30-1.5… -0.425   -1.69   95%      #> 3 a_colitis durvalumab        9  9.43 0.94  (0.45-1.9… -0.0638  -1.16   95%      #> 4 a_colitis nivolumab        44 31.2  1.88  (1.23-2.8…  0.489    0.0314 95%      #> 5 a_colitis pembrolizumab    40 41.3  0.94  (0.61-1.4… -0.0464  -0.528  95%      #> 6 a_colitis avelumab          2  5.96 0.29  (0.07-1.2… -1.37    -3.96   95%      #> 7 a_colitis cemiplimab        0  3.74 -     -          -3.09   -13.1    95%      #> 8 a_colitis tremelimumab      8  3.74 2.75  (1.17-6.4…  1.00    -0.166  95%        # could do the same with adrs  many_adrs <-   names(ex_$a_llt)  demo |> compute_dispro(   y = many_adrs,   x = many_drugs ) #> # A tibble: 24 × 9 #>    y             x            n_obs  n_exp or    or_ci      ic  ic_tail ci_level #>    <chr>         <chr>        <dbl>  <dbl> <chr> <chr>   <dbl>    <dbl> <chr>    #>  1 a_embolism    ipilimumab       1  1.03  0.96  (0.1… -0.0305  -3.83   95%      #>  2 a_colitis     ipilimumab      20 11.9   2.09  (1.2…  0.722    0.0210 95%      #>  3 a_pneumonitis ipilimumab      12 11.8   1.02  (0.5…  0.0220  -0.908  95%      #>  4 a_embolism    atezolizumab     1  0.828 1.24  (0.1…  0.176   -3.62   95%      #>  5 a_colitis     atezolizumab     7  9.57  0.68  (0.3… -0.425   -1.69   95%      #>  6 a_pneumonitis atezolizumab     0  9.48  -     -     -4.32   -14.3    95%      #>  7 a_embolism    durvalumab       1  0.816 1.26  (0.1…  0.189   -3.61   95%      #>  8 a_colitis     durvalumab       9  9.43  0.94  (0.4… -0.0638  -1.16   95%      #>  9 a_pneumonitis durvalumab       6  9.34  0.58  (0.2… -0.598   -1.97   95%      #> 10 a_embolism    nivolumab        1  2.7   0.29  (0.0… -1.09    -4.89   95%      #> # ℹ 14 more rows  # Export raw values if you want to built plots, or other tables.  demo |>   compute_dispro(     y = \"a_colitis\",     x = \"nivolumab\",     export_raw_values = TRUE   ) #> # A tibble: 1 × 19 #>   y       x     n_obs n_exp or    or_ci    ic ic_tail ci_level     a     b     c #>   <chr>   <chr> <dbl> <dbl> <chr> <chr> <dbl>   <dbl> <chr>    <dbl> <dbl> <dbl> #> 1 a_coli… nivo…    44  31.2 1.88  (1.2… 0.489  0.0314 95%         44    60   181 #> # ℹ 7 more variables: d <dbl>, std_er <dbl>, or_raw <dbl>, low_ci <dbl>, #> #   up_ci <dbl>, signif_or <dbl>, signif_ic <dbl>  # Set a minimum number of observed cases to compute disproportionality  demo |>  compute_dispro(  y = \"a_colitis\",  x = \"nivolumab\",  min_n_obs = 5  ) #> # A tibble: 1 × 9 #>   y         x         n_obs n_exp or    or_ci          ic ic_tail ci_level #>   <chr>     <chr>     <dbl> <dbl> <chr> <chr>       <dbl>   <dbl> <chr>    #> 1 a_colitis nivolumab    44  31.2 1.88  (1.23-2.88) 0.489  0.0314 95%"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute interaction disproportionality — compute_interaction","title":"Compute interaction disproportionality — compute_interaction","text":"Returns information component interaction set 3 variables, usually 2 drugs adr.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_interaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute interaction disproportionality — compute_interaction","text":"","code":"compute_interaction(   .data,   y,   x,   z,   alpha = 0.05,   na_format = \"-\",   dig = 2,   export_raw_values = FALSE,   min_n_obs = 0 )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_interaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute interaction disproportionality — compute_interaction","text":".data data.table compute . y character vector, one variable explain. x character vector, one explaining variable. z character vector, one explaining variable. alpha Alpha risk. na_format Character string fill NA values ror ci legends. dig Number digits rounding (argument passed cff) export_raw_values logical. raw values exported? min_n_obs numeric, compute disproportionality pairs least min_n_obs cases.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_interaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute interaction disproportionality — compute_interaction","text":"data.table, Information Component (IC) interaction, credibility interval (1 - alpha). Significance signif_ic, export_raw_values TRUE). data.table columns y, x z, input n_obs number observed cases n_exp number expected cases ic Information Component ic_tail tail probability IC ci_level confidence interval level Additional columns, export_raw_values TRUE: , b, c, d counts contingency table signif_ic significance Information Component Additional columns, export_raw_values TRUE: n_* counts setting signif_ic significance Information Component","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_interaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute interaction disproportionality — compute_interaction","text":"Significance similar usual disproportionality (see compute_dispro()).","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_interaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute interaction disproportionality — compute_interaction","text":"","code":"# Interaction on reporting of colitis with ipilimumab and nivolumab demo <-   demo_ |>   add_drug(     d_code = ex_$d_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `demo` table. #> ℹ `.data` detected as `demo` table.  demo |>   compute_interaction(     y = \"a_colitis\",     x = \"nivolumab\",     z = \"ipilimumab\"   ) #> # A tibble: 1 × 8 #>   y         x         z          n_obs n_exp    ic ic_tail ci_level #>   <chr>     <chr>     <chr>      <dbl> <dbl> <dbl>   <dbl> <chr>    #> 1 a_colitis nivolumab ipilimumab    18  7.88  1.14   0.400 95%"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_or_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute (r)OR from a model summary — compute_or_mod","title":"Compute (r)OR from a model summary — compute_or_mod","text":"Compute format Odds-Ratio model summary.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_or_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute (r)OR from a model summary — compute_or_mod","text":"","code":"compute_or_mod(.coef_table, estimate, std_er, p_val = NULL, alpha = 0.05)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_or_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute (r)OR from a model summary — compute_or_mod","text":".coef_table coefficient table, see details. estimate Quasiquoted name estimate parameter. std_er Quasiquoted name standard error parameter. p_val Quasiquoted name p-value parameter. Optional. alpha alpha risk.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_or_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute (r)OR from a model summary — compute_or_mod","text":"data.table , confidence intervals (1 - alpha), significance (low_ci > 1) (optionally) p-value.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_or_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute (r)OR from a model summary — compute_or_mod","text":"Helper compute format Odds-Ratio based summary(glm)$coefficients, equivalent modelling packages. (see examples). Preferably, transformed data.table data.frame evaluated function. Otherwise, compute_or_mod() transform . Significant -column means low_ci > 1. p_val argument required wished display nice_p(). Output data.table. Actually, function computes Odds-Ratio, necessarily reporting Odds-Ratio.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/compute_or_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute (r)OR from a model summary — compute_or_mod","text":"","code":"# Reporting Odds-Ratio of colitis with nivolumab among ICI cases.  demo <-   demo_ |>   add_drug(     d_code = ex_$d_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `demo` table. #> ℹ `.data` detected as `demo` table.  # Compute the model mod <- glm(a_colitis ~ nivolumab, data = demo, family = \"binomial\")  # Extract coefficients mod_summary <-  mod |>  summary()  coef_table <-  mod_summary$coefficients  # Transform coefficients into ORs with their CI  coef_table |>   compute_or_mod(   estimate = Estimate,   std_er = Std..Error,   p_val = Pr...z..) #>             rn   Estimate Std..Error    z.value     Pr...z..        or #>         <char>      <num>      <num>      <num>        <num>     <num> #> 1: (Intercept) -2.0476928  0.1371736 -14.927752 2.174746e-50 0.1290323 #> 2:   nivolumab  0.6333854  0.2169532   2.919456 3.506429e-03 1.8839779 #>        low_ci     up_ci    orl          ci ci_level signif_ror  p_val #>         <num>     <num> <char>      <char>   <char>      <num> <char> #> 1: 0.09861341 0.1688343   0.13 (0.10-0.17)      95%          0 <.0001 #> 2: 1.23141622 2.8823501   1.88 (1.23-2.88)      95%          1   <.01  # Also works if you don't have a p_val column  coef_table |>   compute_or_mod(   estimate = Estimate,   std_er = Std..Error) #>             rn   Estimate Std..Error    z.value     Pr...z..        or #>         <char>      <num>      <num>      <num>        <num>     <num> #> 1: (Intercept) -2.0476928  0.1371736 -14.927752 2.174746e-50 0.1290323 #> 2:   nivolumab  0.6333854  0.2169532   2.919456 3.506429e-03 1.8839779 #>        low_ci     up_ci    orl          ci ci_level signif_ror #>         <num>     <num> <char>      <char>   <char>      <num> #> 1: 0.09861341 0.1688343   0.13 (0.10-0.17)      95%          0 #> 2: 1.23141622 2.8823501   1.88 (1.23-2.88)      95%          1"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/create_example_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Example source tables for VigiBase and MedDRA — create_example_tables","title":"Example source tables for VigiBase and MedDRA — create_example_tables","text":"Write example tables source text/ascii/parquet files.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/create_example_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example source tables for VigiBase and MedDRA — create_example_tables","text":"","code":"create_ex_main_txt(path)  create_ex_sub_txt(path)  create_ex_who_txt(path)  create_ex_meddra_asc(path)  create_ex_main_pq(path)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/create_example_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example source tables for VigiBase and MedDRA — create_example_tables","text":"path Character string. folder computer tables written.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/create_example_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example source tables for VigiBase and MedDRA — create_example_tables","text":"set text/ascii files, received Uppsala Monitoring Centre MedDRA create_ex_main_txt(), DEMO.txt, DRUG.txt, LINK.txt, FOLLOWUP.txt, ADR.txt, .txt, SRCE.txt, IND.txt create_ex_sub_txt(), AgeGroup_Lx.txt, Dechallenge_Lx.txt, Dechallenge2_Lx.txt, Frequency_Lx.txt, Gender_Lx.txt, Notifier_Lx.txt, Outcome_Lx.txt, Rechallenge_Lx.txt, Rechallenge2_Lx.txt, Region_Lx.txt, RepBasis_Lx.txt, ReportType_Lx.txt, RouteOfAdm_Lx.txt, Seriousness_Lx.txt, SizeUnit_Lx.txt create_ex_who_txt(), ATC.txt, CCODE.txt, ING.txt, MP.txt, ORG.txt, PF.txt, PP.txt, PRT.txt, PRG.txt, SRCE.txt, STR.txt, SUN.txt, ThG.txt, Unit-X.txt create_ex_meddra_asc(), llt.asc, mdhier.asc, smq_content.asc, smq_list.asc create_ex_main_pq(), demo.parquet, adr.parquet, drug.parquet, link.parquet, srce.parquet, ind.parquet, .parquet, followup.parquet, suspdup.parquet","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/create_example_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example source tables for VigiBase and MedDRA — create_example_tables","text":"VigiBase tables MedDRA tables provided respectively text files ascii files. tb_* family turns parquet files. create_example_* functions used produce example source files illustrate tb_* family, parquet files purpose.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/create_example_tables.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Example source tables for VigiBase and MedDRA — create_example_tables","text":"create_ex_sub_txt(): sub txt tables create_ex_who_txt(): txt tables create_ex_meddra_asc(): MedDRA txt tables create_ex_main_pq(): main parquet tables","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/create_example_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example source tables for VigiBase and MedDRA — create_example_tables","text":"","code":"path <- paste0(tempdir(), \"/crex/\")  dir.create(path)  # You may want to use different paths for each type of tables create_ex_main_txt(path)  create_ex_sub_txt(path)  create_ex_who_txt(path)  create_ex_meddra_asc(path)  create_ex_main_pq(path)  # Remove temporary folders when you're done unlink(path, recursive = TRUE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/demo_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data of immune checkpoint inhibitors. — demo_","title":"Data of immune checkpoint inhibitors. — demo_","text":"Demo, drug, adr, link, ind, , srce, followup main table Vigibase Extract Case Level data. regular workflow, work tables R objects (e.g. demo, drug, adr, link, ind, , srce, followup). built-example datasets use underscore \"_\" avoid ambiguity tables (e.g. demo_, drug_, adr_, link_, ind_, out_, srce_, followup_). relational database, means every table primary key variable (e.g., UMCReportId demo_. Keys allow joints tables full details original structure can found \"VigiBase Extract Case Level - file description.pdf\" VigiBase ECL folders. demo_ typically cornerstone table, since contains one row per report. preferred table update drugs adrs identification performing disproportionality analyses. tables subsets original ones, immune checkpoint inhibitor cases immune-related adverse events. data shown example data FAKE, means consider counts computations accurate. Immune checkpoint inhibitors drugs include \"Ipilimumab\", \"Atezolizumab\", \"Durvalumab\", \"Nivolumab\", \"Pembrolizumab\", \"Avelumab\", \"Cemiplimab\",\"REGN 2810\", \"Tremelimumab\". details use vigibase tables can found vignettes. vignette(\"basic_workflow\"), vignette(\"descriptive\"). build tables, use tb_vigibase(). See vignette(\"getting_started\").","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/demo_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data of immune checkpoint inhibitors. — demo_","text":"","code":"data(demo_)  drug_  adr_  link_  followup_  ind_  out_  srce_"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/demo_.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data of immune checkpoint inhibitors. — demo_","text":"demo_ data.table 7 variables 750 rows. UMCReportId Integer. unique identifier case report. AgeGroup Character. age group patient. Correspondence table path_sub/AgeGroup.parquet. Gender Character. Case gender. path_sub/Gender.parquet DateDatabase Character (date numeric!). date latest update report database. Type Character. type report. path_sub/ReportType.parquet Region Character. world region report comes path_sub/Region.parquet. FirstDateDatabase Character. date report first submitted database. drug_ data.table 10 variables 3514 rows. UMCReportId Integer. See demo_. Drug_Id Integer. unique identifier drug report. MedicinalProd_Id Integer. medicinalproduct identifier. See get_atc_code(). DrecNo Integer. Drug Record Number, pivotal identify drugs get_drecno(). Seq1, Seq2 Character. Seq 1 2 complement DrecNo, WHODrug dictionary. Route Character. route administration drug. Basis Character. reputation basis drug (suspect, concomitant, interacting). path_sub/RepBasis.parquet Amount Character. amount drug administered. AmountU Character. unit amount drug administered. path_sub/SizeUnit.parquet Frequency Character. frequency drug administration. FrequencyU Character. unit frequency drug administration. path_sub/Frequency.parquet adr_ data.table 4 variables 2133 rows. UMCReportId Integer. See demo_. Adr_Id Integer. unique identifier adverse event report. MedDRA_Id Integer. MedDRA identifier adverse event. used get_llt_soc() get_llt_smq(). Outcome Character. outcome adverse event. path_sub/Outcome.parquet link_ data.table 3 variables 3514 rows. version built tb_vigibase() slightly different original one. Drug_Id Adr_Id . Integers. Together, key variable link. See drug_ adr_. Dechallenge1 2 Characters. Dechallenge action outcome. path_sub/Dechallenge.parquet, path_sub/Dechallenge2.parquet Rechallenge1 2 Characters. Rechallenge action outcome. path_sub/Rechallenge.parquet, path_sub/Rechallenge2.parquet TimeToOnsetMin Max Numerics. minimum maximum time onset adverse event. tto_mean Numeric. mean time onset adverse event. average TimeToOnsetMin Max. range Numeric. incertitude around tto_mean. See vignette(\"descriptive\"). UMCReportId Integer. See demo_. ind_ data.table 2 variables 2426 rows. Drug_Id Integer. See drug_. Indication Character. indication drug. out_ data.table 3 variables 747 rows. UMCReportId Integer. See demo_. Seriousness Character. seriousness criteria report. path_sub/Seriousness.parquet Serious Character. Whether case serious (\"N\" , \"Y\" Yes) srce_ data.table 2 variables 729 rows. UMCReportId Integer. See demo_. Type Character. Type Reporter. path_sub/Notifier.parquet followup_ data.table 2 variables 902 rows. UMCReportId Integer. See demo_. ReplacedUMCReportId Integer. Previous version case, longer available demo_. object class data.table (inherits data.frame) 3514 rows 12 columns. object class data.table (inherits data.frame) 2133 rows 4 columns. object class data.table (inherits data.frame) 5136 rows 11 columns. object class data.table (inherits data.frame) 902 rows 2 columns. object class data.table (inherits data.frame) 2426 rows 2 columns. object class data.table (inherits data.frame) 747 rows 3 columns. object class data.table (inherits data.frame) 729 rows 2 columns.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/demo_.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data of immune checkpoint inhibitors. — demo_","text":"None","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/demo_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data of immune checkpoint inhibitors. — demo_","text":"none","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/demo_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data of immune checkpoint inhibitors. — demo_","text":"","code":"data(demo_) demo_ |> dplyr::count(AgeGroup) #>    AgeGroup     n #>      <char> <int> #> 1:        2     1 #> 2:        5    43 #> 3:        6   173 #> 4:        7   174 #> 5:        8   108 #> 6:        9   251"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_cont.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize continuous variables — desc_cont","title":"Summarize continuous variables — desc_cont","text":"Summarize continuous data handle output format.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_cont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize continuous variables — desc_cont","text":"","code":"desc_cont(   .data,   vc,   format = \"median (q1-q3) [min-max]\",   digits = 1,   export_raw_values = FALSE )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_cont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize continuous variables — desc_cont","text":".data data.frame, vc column names continuous variables vc character vector, list column names. contain continuous variables format character string. like output? See details. digits numeric. many digits? argument calls internal formatting function export_raw_values logical. raw values exported?","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_cont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize continuous variables — desc_cont","text":"data.frame columns var variable name level NA, provided consistent output desc_facvar() value formatted value possibly median, interquartile range, range (see details) n_avail number cases available data variable.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_cont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize continuous variables — desc_cont","text":"Many packages provide tools summarize data. one just package author's favorite. makes much easier map nice labeling thereafter. format argument shows output function. can change square round brackets, spaces, separators... Important format inputs median median value q1 first quartile q3 third quartile min minimum value max maximum value analogous categorical variables desc_facvar().","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_cont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize continuous variables — desc_cont","text":"","code":"df <-   data.frame(     smoke_status = c(\"smoker\", \"non-smoker\",            \"smoker\", \"smoker\",            \"smoker\", \"smoker\",            \"non-smoker\"            ),     age = c(60, 50, 56, 49, 75, 69, 85),     bmi = c(18, 30, 25, 22, 23, 21, 22)   )  # Use default formatting  desc_cont(.data = df, vc = c(\"age\", \"bmi\")) #>   var level                        value n_avail #> 1 age  <NA> 60.0 (53.0-72.0) [49.0-85.0]       7 #> 2 bmi  <NA> 22.0 (21.5-24.0) [18.0-30.0]       7  # Use custom formatting  desc_cont(.data = df,           vc = c(\"age\", \"bmi\"),           format = \"median (q1;q3)\"           ) #>   var level            value n_avail #> 1 age  <NA> 60.0 (53.0;72.0)       7 #> 2 bmi  <NA> 22.0 (21.5;24.0)       7  # You might want to export raw values, to run plotting or # other formatting functions  desc_cont(.data = df, vc = c(\"age\", \"bmi\"),           export_raw_values = TRUE) #>   var level                        value n_avail median   q1 q3 min max #> 1 age  <NA> 60.0 (53.0-72.0) [49.0-85.0]       7     60 53.0 72  49  85 #> 2 bmi  <NA> 22.0 (21.5-24.0) [18.0-30.0]       7     22 21.5 24  18  30"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_dch.html","id":null,"dir":"Reference","previous_headings":"","what":"Dechallenge descriptive — desc_dch","title":"Dechallenge descriptive — desc_dch","text":"Computes positive dechallenge counts set adr drug pairs.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_dch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dechallenge descriptive — desc_dch","text":"","code":"desc_dch(.data, drug_s = \"drug1\", adr_s = \"adr1\")"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_dch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dechallenge descriptive — desc_dch","text":".data link data.table. drug_s character vector, drug column(s) adr_s character vector, adverse drug reaction column(s).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_dch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dechallenge descriptive — desc_dch","text":"data.table one row per drug-adr pair. drug_s adr_s, input pos_dch, number positive dechallenge cases","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_dch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dechallenge descriptive — desc_dch","text":"Counts provided case level (drug-adr pair level). Positive dechallenge refers cases drug withdrawn dose-reduced reaction abated (part full). need link data.table, see link_, added drugs adrs add_drug() add_adr().","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_dch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dechallenge descriptive — desc_dch","text":"","code":"link_ <-   link_ |>   add_drug(     d_code = ex_$d_groups_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `link` table. #> ℹ `.data` detected as `link` table.   desc_dch(link_,          drug_s = \"pd1\",          adr_s = \"a_colitis\") #>   drug_s     adr_s pos_dch #> 1    pd1 a_colitis      46   # you can vectorize over multiple adrs and drugs  desc_dch(link_,          drug_s = c(\"pd1\", \"pdl1\"),          adr_s = c(\"a_colitis\", \"a_pneumonitis\")) #>   drug_s         adr_s pos_dch #> 1    pd1     a_colitis      46 #> 2   pdl1     a_colitis       2 #> 3    pd1 a_pneumonitis      48 #> 4   pdl1 a_pneumonitis       1"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_facvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise categorical variables — desc_facvar","title":"Summarise categorical variables — desc_facvar","text":"Summarize categorical data handle output format.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_facvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise categorical variables — desc_facvar","text":"","code":"desc_facvar(   .data,   vf,   format = \"n_/N_ (pc_%)\",   digits = 0,   pad_width = 12,   ncat_max = 20,   export_raw_values = FALSE )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_facvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise categorical variables — desc_facvar","text":".data data.frame, vf column names categorical variables vf character vector format character string, formatting options. digits numeric. Number digits percentage (passed interval formatting function). pad_width numeric. Minimum character length value output (passed stringr::str_pad()). ncat_max numeric. many levels allowed variables? See details. export_raw_values logical. raw values exported?","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_facvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise categorical variables — desc_facvar","text":"data.frame columns var variable name level level variable value formatted value possible number cases n_, number available cases N_, percentage pc_, depending format argument. n_avail number cases available data variable.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_facvar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise categorical variables — desc_facvar","text":"Many packages provide tools summarize data. one just package author's favorite. Important format inputs n_ number patients categorical variable said level N_ first quartile number patients available value variable pc_ percentage n / N format argument contain least words \"n_\", \"N_\", optionally \"pc_\". ncat_max ensures provided continuous variable desc_facvar(). many levels one variables, set Inf high value. Equivalent continuous data desc_cont().","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_facvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise categorical variables — desc_facvar","text":"","code":"df1 <-   data.frame(     smoke_status = c(\"smoker\", \"non-smoker\",            \"smoker\", \"smoker\",            \"smoker\", \"smoker\",            \"non-smoker\"            ),    hypertension = c(1, 1, 0, 1, 1, 1, 1),     age = c(60, 50, 56, 49, 75, 69, 85),     bmi = c(18, 30, 25, 22, 23, 21, 22)   )  # Use default formatting desc_facvar(.data = df1, vf = c(\"hypertension\", \"smoke_status\")) #> # A tibble: 4 × 4 #>   var          level      value          n_avail #>   <chr>        <chr>      <chr>            <int> #> 1 hypertension 0          \" 1/7 (14%)  \"       7 #> 2 hypertension 1          \" 6/7 (86%)  \"       7 #> 3 smoke_status non-smoker \" 2/7 (29%)  \"       7 #> 4 smoke_status smoker     \" 5/7 (71%)  \"       7  # Use custom formatting desc_facvar(.data = df1,            vf = c(\"hypertension\", \"smoke_status\"),            format = \"n_ out of N_, pc_%\",            digits = 1) #> # A tibble: 4 × 4 #>   var          level      value             n_avail #>   <chr>        <chr>      <chr>               <int> #> 1 hypertension 0          1 out of 7, 14.3%       7 #> 2 hypertension 1          6 out of 7, 85.7%       7 #> 3 smoke_status non-smoker 2 out of 7, 28.6%       7 #> 4 smoke_status smoker     5 out of 7, 71.4%       7  # You might want to export raw values, to run plotting or # other formatting functions  desc_facvar(.data = df1,             vf = c(\"hypertension\", \"smoke_status\"),             export_raw_values = TRUE) #> # A tibble: 4 × 6 #>   var          level      value          n_avail     n    pc #>   <chr>        <chr>      <chr>            <int> <int> <dbl> #> 1 hypertension 0          \" 1/7 (14%)  \"       7     1  14.3 #> 2 hypertension 1          \" 6/7 (86%)  \"       7     6  85.7 #> 3 smoke_status non-smoker \" 2/7 (29%)  \"       7     2  28.6 #> 4 smoke_status smoker     \" 5/7 (71%)  \"       7     5  71.4"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"Outcome descriptive — desc_outcome","title":"Outcome descriptive — desc_outcome","text":"Compute outcome description set adr drugs.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outcome descriptive — desc_outcome","text":"","code":"desc_outcome(.data, drug_s = \"drug1\", adr_s = \"adr1\")"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outcome descriptive — desc_outcome","text":".data, adr data.table. See adr_ drug_s character vector, drug column(s) adr_s character vector, adverse drug reaction column(s).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outcome descriptive — desc_outcome","text":"data.table one row per drug-adr pair. drug_s adr_s, input n_cas, number cases category out_label, worst outcome drug-adr pair","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_outcome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Outcome descriptive — desc_outcome","text":"need adr data.table. careful directly filter adr data.table drugs! first add drug columns adr, add_drug(). function reports worst outcome consideration given case, many reported. Outcomes, best worst : Recovered/resolved Recovering/resolving Recovered/resolved sequelae recovered/resolved Fatal Died- unrelated reaction Died- reaction may contributory See vignette(\"descriptive\") details.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_outcome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outcome descriptive — desc_outcome","text":"","code":"adr_ <-   adr_ |>   add_drug(     d_code = ex_$d_groups_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `adr` table. #> ℹ `.data` detected as `adr` table.  desc_outcome(   adr_,   drug_s = \"pd1\",   adr_s = \"a_colitis\"   ) #> # A tibble: 6 × 4 #>   drug_s adr_s     n_cas out_label                        #>   <chr>  <chr>     <int> <chr>                            #> 1 pd1    a_colitis    13 Unknown                          #> 2 pd1    a_colitis    39 Recovered/resolved               #> 3 pd1    a_colitis    17 Recovering/resolving             #> 4 pd1    a_colitis     1 Recovered/resolved with sequelae #> 5 pd1    a_colitis    10 Not recovered/not resolved       #> 6 pd1    a_colitis     3 Fatal                             # you can vectorize over multiple adrs and drugs  desc_outcome(   adr_,   drug_s = c(\"pd1\", \"pdl1\"),   adr_s = c(\"a_colitis\", \"a_pneumonitis\")   ) #> # A tibble: 18 × 4 #>    drug_s adr_s         n_cas out_label                        #>    <chr>  <chr>         <int> <chr>                            #>  1 pd1    a_colitis        13 Unknown                          #>  2 pd1    a_colitis        39 Recovered/resolved               #>  3 pd1    a_colitis        17 Recovering/resolving             #>  4 pd1    a_colitis         1 Recovered/resolved with sequelae #>  5 pd1    a_colitis        10 Not recovered/not resolved       #>  6 pd1    a_colitis         3 Fatal                            #>  7 pdl1   a_colitis         5 Unknown                          #>  8 pdl1   a_colitis         7 Recovered/resolved               #>  9 pdl1   a_colitis         6 Not recovered/not resolved       #> 10 pd1    a_pneumonitis    18 Unknown                          #> 11 pd1    a_pneumonitis    33 Recovered/resolved               #> 12 pd1    a_pneumonitis    16 Recovering/resolving             #> 13 pd1    a_pneumonitis     2 Recovered/resolved with sequelae #> 14 pd1    a_pneumonitis    16 Not recovered/not resolved       #> 15 pd1    a_pneumonitis    12 Fatal                            #> 16 pdl1   a_pneumonitis     4 Unknown                          #> 17 pdl1   a_pneumonitis     1 Recovering/resolving             #> 18 pdl1   a_pneumonitis     1 Fatal"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_rch.html","id":null,"dir":"Reference","previous_headings":"","what":"Rechallenge descriptive — desc_rch","title":"Rechallenge descriptive — desc_rch","text":"Computes counts rechallenge cases, set adr drug pairs.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_rch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rechallenge descriptive — desc_rch","text":"","code":"desc_rch(.data, drug_s = \"drug1\", adr_s = \"adr1\")"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_rch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rechallenge descriptive — desc_rch","text":".data link data.table. See link_. drug_s character string. name drug column. Drug columns can created add_drug. adr_s character string. name adr column. Adr columns can created add_adr.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_rch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rechallenge descriptive — desc_rch","text":"data.table one row per drug-adr pair drug_s adr_s, input. Counts overall, rch, inf, rec cases (see details).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_rch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rechallenge descriptive — desc_rch","text":"Counts provided case level (drug-adr pair level). Description span number rechallenge cases informative rechallenge cases (cases outcome known). need link data.table, see link_, added drugs adrs add_drug() add_adr(). Terminology Overall opposed rch rechallenged (rch + no_rch = overall). Among rch, inf (informative) opposed non_inf (inf + non_inf = rch) Among inf, rec (recurring) opposed non_rec (rec + non_rec = inf)","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_rch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rechallenge descriptive — desc_rch","text":"","code":"link_ <-   link_ |>   add_drug(     d_code = ex_$d_groups_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `link` table. #> ℹ `.data` detected as `link` table.  desc_rch(.data = link_,          drug_s = \"pd1\",          adr_s = \"a_colitis\") #>    drug_s     adr_s n_overall n_rch n_inf n_rec #>    <char>    <char>     <int> <int> <int> <int> #> 1:    pd1 a_colitis        81    54    44    16  # You can vectorize over drugs and adrs  desc_rch(.data = link_,          adr_s = c(\"a_colitis\", \"a_pneumonitis\"),          drug_s = c(\"pd1\", \"pdl1\")          ) #>    drug_s         adr_s n_overall n_rch n_inf n_rec #>    <char>        <char>     <int> <int> <int> <int> #> 1:    pd1     a_colitis        81    54    44    16 #> 2:   pdl1     a_colitis        16     7     0     0 #> 3:    pd1 a_pneumonitis        96    66    55    12 #> 4:   pdl1 a_pneumonitis         6     3     0     0"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_tto.html","id":null,"dir":"Reference","previous_headings":"","what":"Time to onset descriptive — desc_tto","title":"Time to onset descriptive — desc_tto","text":"desc_tto() provides drug-adr pair description time onset.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_tto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time to onset descriptive — desc_tto","text":"","code":"desc_tto(.data, adr_s, drug_s, tto_time_range = 1, ...)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_tto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time to onset descriptive — desc_tto","text":".data link data.table. See link_. adr_s character string. name adr column. (see details) drug_s character string. name drug column. (see details) tto_time_range Incertitude range Time onset, days. Defaults 1 recommended umc ... Additional parameters passed desc_cont(). E.g. format, digits...","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_tto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time to onset descriptive — desc_tto","text":"data.table one row per drug-adr pair descriptive time onsets combination (column tto_max).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_tto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time to onset descriptive — desc_tto","text":"Description time (maximum available time) drug initiation event onset. runs drug-adr pair level. Internally, uses extract_tto() desc_cont(), need link data.table, see link_, added drugs adrs add_drug() add_adr(). can supply extra arguments desc_cont() .... Uppsala Monitoring Centre recommends use cases incertitude time onset less 1 day. can change tto_time_range.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/desc_tto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time to onset descriptive — desc_tto","text":"","code":"link_ <-   link_ |>   add_drug(     d_code = ex_$d_groups_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `link` table. #> ℹ `.data` detected as `link` table.  desc_tto(.data = link_,          adr_s = \"a_colitis\",          drug_s = \"pd1\") #>   drug_s     adr_s     var level                           value n_avail #> 1    pd1 a_colitis tto_max  <NA> 59.0 (26.5-190.0) [1.0-1,207.0]      39   desc_tto(.data = link_,          adr_s = c(\"a_colitis\", \"a_pneumonitis\"),          drug_s = c(\"pd1\", \"ctla4\")) #>   drug_s         adr_s     var level                           value n_avail #> 1    pd1     a_colitis tto_max  <NA> 59.0 (26.5-190.0) [1.0-1,207.0]      39 #> 2  ctla4     a_colitis tto_max  <NA>    42.0 (15.8-71.8) [5.0-113.0]      10 #> 3    pd1 a_pneumonitis tto_max  <NA> 61.5 (32.8-127.8) [0.0-1,050.0]      40 #> 4  ctla4 a_pneumonitis tto_max  <NA>   71.0 (52.0-94.0) [23.0-181.0]       8"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Read fst and convert to data.table — dt_fst","title":"Read fst and convert to data.table — dt_fst","text":"Short hand .data.table(read_fst()). File extension can omitted.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read fst and convert to data.table — dt_fst","text":"","code":"dt_fst(path_base, name = NULL, ext = \".fst\")"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read fst and convert to data.table — dt_fst","text":"path_base character string, providing path read . name character string, file name. ext character string, optional, specifying file extension.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_fst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read fst and convert to data.table — dt_fst","text":"data.table, read path_base/(name).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_fst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read fst and convert to data.table — dt_fst","text":"Output data.table. function deprecated, use parquet tables. Tables can now loaded -memory memory dt_parquet.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_fst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read fst and convert to data.table — dt_fst","text":"","code":"# Say you have a data.frame stored in an fst format, such as this one df <- data.frame(a = 1:10)  path <- paste0(tempdir(), \"/dtfstex\") dir.create(path)  fst::write_fst(x = df,               path = paste0(path, \"/\", \"df.fst\")               ) # Now you have a new session without df. rm(df)  # You may import the file directly to data.table format with dt_fst df <- dt_fst(path, \"df\") #> Warning: `dt_fst()` was deprecated in vigicaen 0.12.0. #> ℹ Please use `dt_parquet()` instead.  # Clean up (required for CRAN checks) unlink(path, recursive = TRUE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read parquet and convert to data.table — dt_parquet","title":"Read parquet and convert to data.table — dt_parquet","text":"Load data - - memory. File extension can omitted.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read parquet and convert to data.table — dt_parquet","text":"","code":"dt_parquet(path_base, name = NULL, ext = \".parquet\", in_memory = TRUE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read parquet and convert to data.table — dt_parquet","text":"path_base character string, providing path read . name Optional. character string. file name (absent path_base). ext Optional. character string. file extension. in_memory Logical, data loaded memory?","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read parquet and convert to data.table — dt_parquet","text":"data.table in_memory set TRUE, parquet Table in_memory set FALSE.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_parquet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read parquet and convert to data.table — dt_parquet","text":"Output data.table. meddra whodrug tables, still good option load data -memory. function wrapping arrow::read_parquet(), dplyr::collect() data.table::.data.table() altogether. want load memory, set arg in_memory FALSE. careful change function output format. latter case, output data.table, practical benefit compared using arrow::read_parquet() directly, as_data_frame = FALSE.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/dt_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read parquet and convert to data.table — dt_parquet","text":"","code":"# Say you have a data.frame stored in a parquet format, such as this one demo <-   data.table::data.table(     UMCReportId = c(1, 2, 3, 4),     AgeGroup = c(1, 7, 7, 8)   ) |>   arrow::as_arrow_table()  tmp_folder <- paste0(tempdir(), \"/dtparquetex\") dir.create(tmp_folder) path_data <- paste0(tmp_folder, \"/\")  arrow::write_parquet(demo,                      sink = paste0(path_data, \"demo.parquet\") )  # Now you have a new session without demo rm(demo)  # You may import the file directly to data.table format with dt_parquet demo <-   dt_parquet(path_data, \"demo\")  # Clean up (required for CRAN checks) unlink(tmp_folder, recursive = TRUE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ex_.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for the immune checkpoint inhibitors example — ex_","title":"Data for the immune checkpoint inhibitors example — ex_","text":"set data provide examples package. smq_sel named list smq names pt_sel named list pt names a_llt named list meddra llt codes related adrs smq_sel pt_sel d_drecno named list drecnos immune checkpoint inhibitors () d_groups named list ici classes according icis d_groups_drecno named list drecnos drug groups","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ex_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for the immune checkpoint inhibitors example — ex_","text":"","code":"data(ex_)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ex_.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for the immune checkpoint inhibitors example — ex_","text":"object class list.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ex_.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for the immune checkpoint inhibitors example — ex_","text":"VigiBase Extract Case Level","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ex_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data for the immune checkpoint inhibitors example — ex_","text":"none","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ex_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for the immune checkpoint inhibitors example — ex_","text":"","code":"data(ex_) ex_$pt_sel #> $colitis #>  [1] \"Colitis\"                    \"Autoimmune colitis\"         #>  [3] \"Colitis microscopic\"        \"Diarrhoea\"                  #>  [5] \"Diarrhoea haemorrhagic\"     \"Duodenitis\"                 #>  [7] \"Enteritis\"                  \"Enterocolitis\"              #>  [9] \"Enterocolitis haemorrhagic\" \"Ulcerative gastritis\"       #>  #> $pneumonitis #> [1] \"Pneumonitis\"          \"Organising pneumonia\" #>"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/extract_tto.html","id":null,"dir":"Reference","previous_headings":"","what":"Time to onset extraction — extract_tto","title":"Time to onset extraction — extract_tto","text":"extract_tto() collects available time onsets set drug-adr pairs.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/extract_tto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time to onset extraction — extract_tto","text":"","code":"extract_tto(.data, adr_s, drug_s, tto_time_range = 1)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/extract_tto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time to onset extraction — extract_tto","text":".data link data.table. See link_. adr_s character string. name adr column. (see details) drug_s character string. name drug column. (see details) tto_time_range Incertitude range Time onset, days. Defaults 1 recommended umc","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/extract_tto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time to onset extraction — extract_tto","text":"data.frame available time onsets combination (column tto_max). adr_s drug_s, input. UMCReportId, unique identifier case.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/extract_tto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time to onset extraction — extract_tto","text":"Extraction (maximum available) time drug initiation event onset. runs drug-adr pair level. need link data.table, see link_, added drugs adrs add_drug() add_adr(). Uppsala Monitoring Centre recommends use cases incertitude time onset less 1 day. can change tto_time_range. might want use desc_tto() obtain summary statistics time onset, extract_tto() useful get raw data plot , instance ggplot2.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/extract_tto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time to onset extraction — extract_tto","text":"","code":"link_ <-   link_ |>   add_drug(     d_code = ex_$d_groups_drecno,     drug_data = drug_   ) |>   add_adr(     a_code = ex_$a_llt,     adr_data = adr_   ) #> ℹ `.data` detected as `link` table. #> ℹ `.data` detected as `link` table.  extract_tto(.data = link_,          adr_s = \"a_colitis\",          drug_s = \"pd1\") #>    UMCReportId tto_max     adr_s drug_s #> 1    108846594     205 a_colitis    pd1 #> 2     73027866     175 a_colitis    pd1 #> 3     87966085      36 a_colitis    pd1 #> 4     88371745     740 a_colitis    pd1 #> 5    138643678     379 a_colitis    pd1 #> 6     39936658      99 a_colitis    pd1 #> 7    142848064    1207 a_colitis    pd1 #> 8    140765885       5 a_colitis    pd1 #> 9     11372968      62 a_colitis    pd1 #> 10    24328271      88 a_colitis    pd1 #> 11    63102481      57 a_colitis    pd1 #> 12    34209616       8 a_colitis    pd1 #> 13    21293261      59 a_colitis    pd1 #> 14    81010378      27 a_colitis    pd1 #> 15    67492542      78 a_colitis    pd1 #> 16    58329610     541 a_colitis    pd1 #> 17   109965210       1 a_colitis    pd1 #> 18    84968360       4 a_colitis    pd1 #> 19    37122185      11 a_colitis    pd1 #> 20    77761414       3 a_colitis    pd1 #> 21    26302027     137 a_colitis    pd1 #> 22    38269558     393 a_colitis    pd1 #> 23    85691581     490 a_colitis    pd1 #> 24   112663221       7 a_colitis    pd1 #> 25      610256      52 a_colitis    pd1 #> 26   109716692      37 a_colitis    pd1 #> 27    56986472      47 a_colitis    pd1 #> 28     6112110      44 a_colitis    pd1 #> 29    76401465     390 a_colitis    pd1 #> 30   125056616      18 a_colitis    pd1 #> 31    33942691      36 a_colitis    pd1 #> 32    63782466      41 a_colitis    pd1 #> 33     1261650     286 a_colitis    pd1 #> 34    85774959     254 a_colitis    pd1 #> 35   133088642      23 a_colitis    pd1 #> 36   143881598     113 a_colitis    pd1 #> 37    79620779      85 a_colitis    pd1 #> 38    33962643      26 a_colitis    pd1 #> 39    95759941      59 a_colitis    pd1 extract_tto(.data = link_,          adr_s = c(\"a_colitis\", \"a_pneumonitis\"),          drug_s = c(\"pd1\", \"ctla4\")) #>    UMCReportId tto_max         adr_s drug_s #> 1    108846594     205     a_colitis    pd1 #> 2     73027866     175     a_colitis    pd1 #> 3     87966085      36     a_colitis    pd1 #> 4     88371745     740     a_colitis    pd1 #> 5    138643678     379     a_colitis    pd1 #> 6     39936658      99     a_colitis    pd1 #> 7    142848064    1207     a_colitis    pd1 #> 8    140765885       5     a_colitis    pd1 #> 9     11372968      62     a_colitis    pd1 #> 10    24328271      88     a_colitis    pd1 #> 11    63102481      57     a_colitis    pd1 #> 12    34209616       8     a_colitis    pd1 #> 13    21293261      59     a_colitis    pd1 #> 14    81010378      27     a_colitis    pd1 #> 15    67492542      78     a_colitis    pd1 #> 16    58329610     541     a_colitis    pd1 #> 17   109965210       1     a_colitis    pd1 #> 18    84968360       4     a_colitis    pd1 #> 19    37122185      11     a_colitis    pd1 #> 20    77761414       3     a_colitis    pd1 #> 21    26302027     137     a_colitis    pd1 #> 22    38269558     393     a_colitis    pd1 #> 23    85691581     490     a_colitis    pd1 #> 24   112663221       7     a_colitis    pd1 #> 25      610256      52     a_colitis    pd1 #> 26   109716692      37     a_colitis    pd1 #> 27    56986472      47     a_colitis    pd1 #> 28     6112110      44     a_colitis    pd1 #> 29    76401465     390     a_colitis    pd1 #> 30   125056616      18     a_colitis    pd1 #> 31    33942691      36     a_colitis    pd1 #> 32    63782466      41     a_colitis    pd1 #> 33     1261650     286     a_colitis    pd1 #> 34    85774959     254     a_colitis    pd1 #> 35   133088642      23     a_colitis    pd1 #> 36   143881598     113     a_colitis    pd1 #> 37    79620779      85     a_colitis    pd1 #> 38    33962643      26     a_colitis    pd1 #> 39    95759941      59     a_colitis    pd1 #> 40     2626997     107     a_colitis  ctla4 #> 41   140765885       5     a_colitis  ctla4 #> 42    11372968      15     a_colitis  ctla4 #> 43    12728402      76     a_colitis  ctla4 #> 44   112663221       7     a_colitis  ctla4 #> 45   109716692      37     a_colitis  ctla4 #> 46    56986472      47     a_colitis  ctla4 #> 47   125056616      18     a_colitis  ctla4 #> 48   143881598     113     a_colitis  ctla4 #> 49    95759941      59     a_colitis  ctla4 #> 50    51868324     602 a_pneumonitis    pd1 #> 51   141780031      43 a_pneumonitis    pd1 #> 52    38542967     105 a_pneumonitis    pd1 #> 53    46205163      90 a_pneumonitis    pd1 #> 54   143915039    1050 a_pneumonitis    pd1 #> 55     8037093      58 a_pneumonitis    pd1 #> 56    51289899       6 a_pneumonitis    pd1 #> 57     5827498     150 a_pneumonitis    pd1 #> 58   109804882      32 a_pneumonitis    pd1 #> 59    60410606      52 a_pneumonitis    pd1 #> 60    28278690     470 a_pneumonitis    pd1 #> 61    59468437      33 a_pneumonitis    pd1 #> 62    68574533      49 a_pneumonitis    pd1 #> 63   105702324      29 a_pneumonitis    pd1 #> 64    55788241     125 a_pneumonitis    pd1 #> 65   120048321       8 a_pneumonitis    pd1 #> 66    91145758      21 a_pneumonitis    pd1 #> 67    42289125     136 a_pneumonitis    pd1 #> 68    49019818      77 a_pneumonitis    pd1 #> 69   119065329      34 a_pneumonitis    pd1 #> 70    11932941      58 a_pneumonitis    pd1 #> 71   106102063      65 a_pneumonitis    pd1 #> 72    82344156      52 a_pneumonitis    pd1 #> 73    40884461      23 a_pneumonitis    pd1 #> 74    63322168     523 a_pneumonitis    pd1 #> 75   100871963      43 a_pneumonitis    pd1 #> 76   140323054      18 a_pneumonitis    pd1 #> 77   147304194     117 a_pneumonitis    pd1 #> 78    12314086      69 a_pneumonitis    pd1 #> 79   143881598     181 a_pneumonitis    pd1 #> 80     3460652     138 a_pneumonitis    pd1 #> 81    27273063      25 a_pneumonitis    pd1 #> 82    84451753       1 a_pneumonitis    pd1 #> 83    79620779     511 a_pneumonitis    pd1 #> 84   103773756      52 a_pneumonitis    pd1 #> 85   123322212       0 a_pneumonitis    pd1 #> 86   135108556     183 a_pneumonitis    pd1 #> 87    90067921     101 a_pneumonitis    pd1 #> 88    95759941      73 a_pneumonitis    pd1 #> 89    76017998      72 a_pneumonitis    pd1 #> 90    38542967     106 a_pneumonitis  ctla4 #> 91    46205163      90 a_pneumonitis  ctla4 #> 92    82344156      52 a_pneumonitis  ctla4 #> 93    40884461      23 a_pneumonitis  ctla4 #> 94    12314086      69 a_pneumonitis  ctla4 #> 95   143881598     181 a_pneumonitis  ctla4 #> 96   103773756      52 a_pneumonitis  ctla4 #> 97    95759941      73 a_pneumonitis  ctla4"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_atc_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ATC codes (DrecNos or MPIs) — get_atc_code","title":"Get ATC codes (DrecNos or MPIs) — get_atc_code","text":"Collect Drug Record Numbers MedicinalProd_Ids associated one ATC classes.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_atc_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ATC codes (DrecNos or MPIs) — get_atc_code","text":"","code":"get_atc_code(atc_sel, mp, thg_data, vigilyze = TRUE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_atc_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ATC codes (DrecNos or MPIs) — get_atc_code","text":"atc_sel named list ATC codes. See Details. mp modified MP data.table. See mp_ thg_data data.table. Correspondence ATC codes MedicinalProd_Id (usually, thg) vigilyze logical. ATC classes retrieved using vigilyze style? See details","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_atc_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ATC codes (DrecNos or MPIs) — get_atc_code","text":"named list integers. DrecNos vigilyze set TRUE, MedicinalProd_Ids vigilyze set FALSE.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_atc_code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get ATC codes (DrecNos or MPIs) — get_atc_code","text":"get_atc_code() ID collector function. Provide atc_sel way d_sel add_drug(), remember specify method arg MedicinalProd_Id vigilyze set FALSE. Vigilyze style means conditioning drugs retrieved requesting ATC class (.e., drugs identified DrecNos), even specific conditioning present ATC class. default behavior vigilyze.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_atc_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ATC codes (DrecNos or MPIs) — get_atc_code","text":"","code":"# ## Find codes associated with one or more atc classes  # First, define which atc you want to use  atc_sel <-      rlang::list2(l03_j01 = c(\"L03AA\", \"J01CA\"),                   c09aa = c(\"C09AA\")      )  # You can get DrecNos for you ATCs (if vigilyze is TRUE)  atc_drecno <-   get_atc_code(atc_sel = atc_sel,                mp = mp_,                thg_data = thg_,                vigilyze = TRUE) #> ℹ vigilyze set to TRUE, extracting DrecNos (?get_atc_code for details)  # Or you can get MedicinalProd_Ids (if vigilyze is FALSE)  atc_mpi <-   get_atc_code(atc_sel = atc_sel,                mp = mp_,                thg_data = thg_,                vigilyze = FALSE) #> ℹ vigilyze set to FALSE, extracting MedicinalProd_ids (?get_atc_code for details)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"Collect Drug Record Numbers associated one drugs.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"","code":"get_drecno(   d_sel,   mp,   allow_combination = TRUE,   method = c(\"drug_name\", \"mpi_list\"),   verbose = TRUE,   show_all = deprecated(),   inspect = deprecated() )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"d_sel named list. Selection drug names medicinalprod_id. See details mp modified MP data.table. See mp_ allow_combination logical. fixed associations including drug interest retrieved? See details. method DrecNo found drug names MedicinalProd_Id? verbose logical. Allows see matching drug names console. Turn FALSE checked matching. show_all Use verbose instead. inspect Use verbose instead.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"named list integers. DrecNos.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"get_drecno() ID collector function. Collected IDs can used create drug columns datasets like demo, link, etc. (see vignette(\"basic_workflow\"))","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"argument-verbose","dir":"Reference","previous_headings":"","what":"Argument verbose","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"verbose argument let check result get_drecno(). important step project setup: must ensure drugs looking correctly matched.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"argument-d-sel","dir":"Reference","previous_headings":"","what":"Argument d_sel","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"d_sel must named list character vectors. learn , see vignette(\"basic_workflow\"). Names d_sel automatically lowered trimed.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"matching-drugs","dir":"Reference","previous_headings":"","what":"Matching drugs","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"\"drug_name\" method, either exact match perl regex match can used. latter built upon lookarounds ensure string match composite drug names including string, .e. trastuzumab emtasine trastuzumab, close names like alitretinoin looking tretinoin. Exact match used \"mpi_list\" method.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"choosing-a-method","dir":"Reference","previous_headings":"","what":"Choosing a method","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"\"drug_name\" let work drug names. likely appropriate method cases. \"mpi_list\" used list MedicinalProd_Ids. drug can multiple MedicinalProd_Ids, corresponding different packagings. MedicinalProd_Id matching typically used identify DrecNo(s) contained ATC class (extracted thg), since MPI drugs present thg (explanations get_atc_code()).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"who-names","dir":"Reference","previous_headings":"","what":"WHO names","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"names attributed drugs ... . drug one name, can multiple international nonproprietary names (e.g. \"tretinoin\" \"-trans retinoic acid\"). use names ensure proper identification drugs DrecNos, especially work combinations.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"argument-allow-combination","dir":"Reference","previous_headings":"","what":"Argument allow_combination","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"Fixed associations drugs refers specialty containing one active ingredient (example, acetylsalicylic acid clopidogrel). VigiLyze, default account fixed associations. example, call \"acetylsalicylic acid\" VigiLyze, cases reported fixed-association \"acetylsalicylic acid; clopidogrel\" unless substances distinctly coded reporter. , default find drug even prescribed fixed association. Importantly, retrieving fixed-association drugs, non--interest drug alone drecno found, hence cases related drug added drug interest.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_drecno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get DrecNo from drug names or MedicinalProd_Id — get_drecno","text":"","code":"if (FALSE) { # interactive()  # ## Get drecnos for a list a drugs. Check spelling and use WHO name, # in lowercase  d_sel_names <- list(   nivolumab = \"nivolumab\",   ipilimumab = \"ipilimumab\",   nivo_ipi = c(\"nivolumab\", \"ipilimumab\")   )  # Read mp with get_drecno(), to identify drugs without combinations  # Take the time to read the matching drugs. Did you forget a drug?  d_drecno <-   get_drecno(d_sel_names,              mp = mp_,              allow_combination = FALSE,              method = \"drug_name\") d_drecno  # And DrecNos of drugs allowing for combinations  d_drecno <-   get_drecno(d_sel = d_sel_names,              mp = mp_,              allow_combination = TRUE,              method = \"drug_name\") d_drecno }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_smq.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract low level terms from SMQs — get_llt_smq","title":"Extract low level terms from SMQs — get_llt_smq","text":"Collect llts smq_list smq_content data.tables, given SMQ.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_smq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract low level terms from SMQs — get_llt_smq","text":"","code":"get_llt_smq(   smq,   smq_scope = c(\"narrow\", \"broad\"),   smq_list,   smq_content,   smq_list_content = deprecated() )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_smq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract low level terms from SMQs — get_llt_smq","text":"smq named list character vector length 1. smq_scope character vector. One \"narrow\" \"broad\". smq_list data.table. list SMQs. smq_content data.table. list SMQs content. smq_list_content","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_smq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract low level terms from SMQs — get_llt_smq","text":"named list integers. Low-level term codes.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_smq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract low level terms from SMQs — get_llt_smq","text":"get_llt_smq() ID collector function. SMQ stands Standardized MedDRA query. get_llt_smq()works NON-algorithmic SMQs (status given smq_list table). See smq_list_ smq_content_. can choose narrow broad scope SMQ. want work SOC hierarchy, use get_llt_soc().","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_smq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract low level terms from SMQs — get_llt_smq","text":"","code":"if (FALSE) { # interactive() ## Finding llt codes for Embolism (SMQ)  smq_sel <- rlang::list2(   embolism = \"Embolic and thrombotic events, venous (SMQ)\"  ) get_llt_smq(smq_sel,                 smq_scope = \"narrow\",                 smq_list = smq_list_,                 smq_content = smq_content_                 )  # You can query multiple SMQs in one item, and query high level SMQs smq_sel2 <-   rlang::list2(     sepsis = c(\"Sepsis (SMQ)\",\"Toxic-septic shock conditions (SMQ)\"),     ischemic_heart_disease = c(\"Ischaemic heart disease (SMQ)\"),   )  get_llt_smq(smq_sel2,             smq_scope = \"narrow\",             smq_list = smq_list_,             smq_content = smq_content_             ) }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_soc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract low level terms from soc classification — get_llt_soc","title":"Extract low level terms from soc classification — get_llt_soc","text":"Collect llt codes meddra data.table, given another term MedDRA SOC Hierarchy.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_soc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract low level terms from soc classification — get_llt_soc","text":"","code":"get_llt_soc(   term_sel,   term_level = c(\"soc\", \"hlgt\", \"hlt\", \"pt\", \"llt\"),   meddra,   verbose = TRUE )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_soc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract low level terms from soc classification — get_llt_soc","text":"term_sel named list character vector(s). terms extract llts codes . See details. term_level character string. One \"soc\", \"hlgt\", \"hlt\", \"pt\", \"llt\" meddra data.table. Built meddra_builders functions verbose Logical. Allows see matching reactions console.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_soc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract low level terms from soc classification — get_llt_soc","text":"named list integers. Low-level term codes.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_soc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract low level terms from soc classification — get_llt_soc","text":"get_llt_soc() ID collector function. function extracts low level term codes. get_llt_soc() case-sensitive, MedDRA terms always begin capital letter, native version. term_sel, terms come hierarchical level, e.g. preferred terms, high level terms, etc.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/get_llt_soc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract low level terms from soc classification — get_llt_soc","text":"","code":"if (FALSE) { # interactive()  ## Finding llt codes for colitis  pt_sel <- rlang::list2(   colitis = c(\"Colitis\",               \"Autoimmune colitis\"),   pneumonitis = c(\"Pneumonitis\",                   \"Organising pneumonia\")   )  hlt_sel <- rlang::list2(   colitis = c(\"Gastrointestinal inflammatory disorders NEC\"),   pneumonitis = c(\"Pulmonary thrombotic and embolic conditions\")   )  # Remember you can use more than one term to define each adverse reaction, # but they should all be at the same hierarchical level in meddra.  # with preferred terms  get_llt_soc(   term_sel = pt_sel,   term_level = \"pt\",   meddra = meddra_   )  # with high level terms  get_llt_soc(   term_sel = hlt_sel,   term_level = \"hlt\",   meddra = meddra_   ) }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ic_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Credibility interval limits for the information component — ic_tail","title":"Credibility interval limits for the information component — ic_tail","text":"Compute Information Component credibility interval, typically lower end 95% CI, also known IC025.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ic_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Credibility interval limits for the information component — ic_tail","text":"","code":"ic_tail(n_obs, n_exp, p = 0.025)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ic_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Credibility interval limits for the information component — ic_tail","text":"n_obs Number observed cases n_exp Number expected cases (see Details) p End chosen credibility interval","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ic_tail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Credibility interval limits for the information component — ic_tail","text":"numeric vector. lower end credibility interval","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ic_tail.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Credibility interval limits for the information component — ic_tail","text":"ends credibility interval information component estimated gamma distribution. n_exp defined n_drug * n_event / n_total basic IC (formula different interactions) add +.5 n_obs n_exp automatically done function. default, IC025 computed. Change p different ends. may easier use compute_dispro(), internally calls function.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/ic_tail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Credibility interval limits for the information component — ic_tail","text":"","code":"ic_tail(n_obs = 12,         n_exp = 5) #> [1] 0.2542334"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/meddra_.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample of Meddra. — meddra_","title":"Sample of Meddra. — meddra_","text":"Anonymized data MedDRA, used illustrate package examples vignettes. can find term codes related colitis, pneumonitis, hepatitis, SMQ embolisms. Compounds meddra_, smq_list_, smq_content_ smq_list_content_. Create dedicated .parquet files using tb_meddra(). See examples get_llt_soc get_llt_smq","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/meddra_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample of Meddra. — meddra_","text":"","code":"data(meddra_)  smq_list_content_  smq_list_  smq_content_"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/meddra_.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample of Meddra. — meddra_","text":"meddra_ data.table 15 variables 677 rows. *_code columns. Integers. MedDRA code given term. *_name columns. Characters. name term. soc_abbrev Character. abbreviation SOC. null_field Logical. Empty column. pt_soc_code Integer. preferred term code SOC . primary_soc_fg Character. Whether SOC primary code. \"Y\" \"N\", Yes . empty_col Logical. Empty column. smq_list_ data.table 9 variables 11 rows. list SMQ. smq_code Integer. code SMQ. smq_name Character. name SMQ. smq_level Integer. hierarchical level SMQ. smq_description Character. description SMQ. smq_source Character. source SMQ. smq_note Character. Additional note SMQ. MedDRA_version Numeric. version MedDRA. status Character. status SMQ (active ) smq_algorithm Character. Whether SMQ algorithmic . empty_col Logical. Empty column. smq_content_ data.table 9 variables 3386 rows. content SMQ. smq_code Integer. code SMQ. term_code Integer. low-level term code. term_level Integer. hierarchical level term. term_scope Integer. scope term (narrow 2 broad 1) term_category Character. algorithmic SMQs, category term. term_weight Integer. weight term (algorithmic SMQs). term_status Integer. status term (active ) term_addition_version Numeric. version term addition. term_last_modified_version Numeric. last MedDRA version term modified. empty_col Logical. Empty column. smq_list_content_ data.table 19 variables 3386 rows. fusion smq_list smq_content, created tb_meddra(). smq_code Integer. code SMQ. smq_name Character. name SMQ. smq_level Integer. hierarchical level SMQ. smq_description Character. description SMQ. smq_source Character. source SMQ. smq_note Character. Additional note SMQ. MedDRA_version Numeric. version MedDRA. status Character. status SMQ (active ) smq_algorithm Character. Whether SMQ algorithmic . empty_col.x Logical. Empty column. term_code Integer. low-level term code. term_level Integer. hierarchical level term. term_scope Integer. scope term (narrow 2 broad 1) term_category Character. algorithmic SMQs, category term. term_weight Integer. weight term (algorithmic SMQs). term_status Integer. status term (active ) term_addition_version Numeric. version term addition. term_last_modified_version Numeric. last MedDRA version term modified. empty_col.y Logical. Empty column. object class data.table (inherits data.frame) 3386 rows 19 columns. object class data.table (inherits data.frame) 11 rows 9 columns. object class data.table (inherits data.frame) 3386 rows 9 columns.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/meddra_.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample of Meddra. — meddra_","text":"None","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/meddra_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample of Meddra. — meddra_","text":"none","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/meddra_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample of Meddra. — meddra_","text":"","code":"data(meddra_)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/mp_.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample of WHODrug — mp_","title":"Sample of WHODrug — mp_","text":"small part WHODrug, used illustrate package examples vignettes. can find DrecNo related immune checkpoint inhibitors, paracetamol, tramadol, tretinoin, anti-thrombin iii, ATC classes L03AA Colony stimulating factors, C09AA ACE inhibitors, plain, J01CA Penicillins extended spectrum. Compounds thg_ mp_. See examples get_drecno get_atc_code","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/mp_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample of WHODrug — mp_","text":"","code":"data(mp_)  thg_"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/mp_.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample of WHODrug — mp_","text":"mp_ data.table 8 variables 14146 rows. MedicinalProd_Id Integer. medicinalproduct identifier. Sequence.number.1 2 Characters. Complement DrecNo. DrecNo Character. Drug Record Number, pivotal identify drugs get_drecno(). drug_name_t Character. name drug. Compared original drug_name variable mp table, variable trimmed white spaces, names lowercase. Create.date Character. date record created. Date.changed Character. date record last changed. Country Character. country record created. thg_ data.table 5 variables 4079 rows. Therapgroup_Id Integer. identifier therapeutic group. ATC.code Character. ATC code drug. Create.date Character. date record created. Official.ATC.code Character. Whether ATC code official (Yes/). MedicinalProd_Id Integer. medicinalproduct identifier. object class data.table (inherits data.frame) 4079 rows 5 columns.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/mp_.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample of WHODrug — mp_","text":"None","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/mp_.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample of WHODrug — mp_","text":"none","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/mp_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample of WHODrug — mp_","text":"","code":"data(mp_)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/nice_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Nice printing of p-values — nice_p","title":"Nice printing of p-values — nice_p","text":"Formatting function consistent p-value reporting. can choose print leading zero (e.g. 0.01) (e.g. .01) print_zero.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/nice_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nice printing of p-values — nice_p","text":"","code":"nice_p(p_val, print_zero = FALSE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/nice_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nice printing of p-values — nice_p","text":"p_val numeric. p-value format. print_zero logical. leading zero printed? (see Details)","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/nice_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nice printing of p-values — nice_p","text":"character vector formatted p-value(s)","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/nice_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nice printing of p-values — nice_p","text":"","code":"pvals <-   c(0.056548, 0.0002654, 0.816546, 0.0493321) nice_p(pvals) #> [1] \".06\"   \"<.001\" \".82\"   \".049\"   nice_p(pvals, print_zero = TRUE) #> [1] \"0.06\"   \"<0.001\" \"0.82\"   \"0.049\""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_adr.html","id":null,"dir":"Reference","previous_headings":"","what":"Screening of Adverse Drug Reactions — screen_adr","title":"Screening of Adverse Drug Reactions — screen_adr","text":"Identify rank frequently reported adverse drug reaction (ADR) terms dataset, based specified MedDRA term level. allows users filter terms frequency threshold extract top n frequently occurring terms.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_adr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screening of Adverse Drug Reactions — screen_adr","text":".data, adr data.table. See adr_ meddra meddra data.table. See meddra_ term_level character string specifying MedDRA hierarchy level. Must one \"soc\", \"hlgt\", \"hlt\", \"pt\", \"llt\". freq_threshold numeric value indicating minimum frequency (proportion) cases term must appear included results. example, 0.05 means 5%. Defaults NULL, meaning threshold applied unless top_n different NULL. top_n integer specifying number frequently occurring terms return. Defaults NULL. Overrides freq_threshold provided.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_adr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screening of Adverse Drug Reactions — screen_adr","text":"data.frame following columns: term: MedDRA term specified hierarchy level. n: number unique reports (cases) term appears. percentage: percentage total unique reports term appears. results sorted descending order percentage.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_adr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Screening of Adverse Drug Reactions — screen_adr","text":"freq_threshold set (e.g., 0.05), function filters ADR terms appearing least 5% unique reports .data. top_n specified, frequent n terms returned. freq_threshold top_n provided, top_n applied (warning issued cases). Counts computed case level, ADR level. means frequencies reflect proportion unique reports (cases) term mentioned, rather total mentions across reports. function processes ADR dataset (adr_) MedDRA dataset (meddra_) generate results linked specific MedDRA hierarchy level (soc, hlgt, hlt, pt, llt).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_adr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screening of Adverse Drug Reactions — screen_adr","text":"","code":"# Example 1: Filter terms appearing in at least 5% of reports screen_adr(   .data = adr_,   meddra = meddra_,   term_level = \"pt\",   freq_threshold = 0.05 ) #>           term     n percentage #>         <char> <int>      <num> #> 1:        <NA>   678   90.40000 #> 2: Pneumonitis    92   12.26667 #> 3:   Diarrhoea    69    9.20000  # Example 2: Get the top 5 most frequent terms screen_adr(   .data = adr_,   meddra = meddra_,   term_level = \"hlt\",   top_n = 5 ) #>                                                               term     n #>                                                             <char> <int> #> 1:                                                            <NA>   678 #> 2: Lower respiratory tract inflammatory and immunologic conditions    92 #> 3:                                      Diarrhoea (excl infective)    69 #> 4:                                        Colitis (excl infective)    40 #> 5:                                  Parenchymal lung disorders NEC    11 #>    percentage #>         <num> #> 1:  90.400000 #> 2:  12.266667 #> 3:   9.200000 #> 4:   5.333333 #> 5:   1.466667"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_drug.html","id":null,"dir":"Reference","previous_headings":"","what":"Screening of Drugs — screen_drug","title":"Screening of Drugs — screen_drug","text":"screen_drug() function identifies ranks frequently reported drugs (active ingredient) dataset.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_drug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screening of Drugs — screen_drug","text":"","code":"screen_drug(.data, mp_data, freq_threshold = NULL, top_n = NULL)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_drug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screening of Drugs — screen_drug","text":".data, drug data.table. See drug_ mp_data MP data.table. See mp_ freq_threshold numeric value indicating minimum frequency (proportion) cases drug must appear included results. Defaults NULL. top_n integer specifying number frequently occurring drugs return. Defaults NULL.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_drug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screening of Drugs — screen_drug","text":"data.frame following columns: Drug name: drug name. DrecNo: drug record number N: number unique reports (cases) drug appears. percentage: percentage total unique reports drug appears. results sorted descending order percentage.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_drug.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Screening of Drugs — screen_drug","text":"freq_threshold set (e.g., 0.05), function filters drugs appearing least 5% unique reports .data. top_n specified, frequent n drugs returned. freq_threshold top_n provided, top_n applied (warning raised cases). Counts computed case level, drug mention level. means frequencies reflect proportion unique reports (cases) drug mentioned, rather total mentions across reports.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/screen_drug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screening of Drugs — screen_drug","text":"","code":"# Set up start data.table::setDTthreads(1)  # Filter drugs appearing in at least 10% of reports screen_drug(   .data = drug_,   mp_data = mp_,   freq_threshold = 0.10 ) #> # A tibble: 3 × 4 #>   `Drug name`      DrecNo     N percentage #>   <chr>             <dbl> <int>      <dbl> #> 1 pembrolizumab  20116296   298       39.7 #> 2 nivolumab     111841511   225       30   #> 3 ipilimumab    133138448    86       11.5  # Get the top 5 most reported drugs screen_drug(   .data = drug_,   mp_data = mp_,   top_n = 5 ) #> # A tibble: 5 × 4 #>   `Drug name`      DrecNo     N percentage #>   <chr>             <dbl> <int>      <dbl> #> 1 pembrolizumab  20116296   298      39.7  #> 2 nivolumab     111841511   225      30    #> 3 ipilimumab    133138448    86      11.5  #> 4 atezolizumab  112765189    69       9.2  #> 5 durvalumab    125456180    68       9.07  # nb: in the example datasets, not all drugs are recorded in mp_, # leading to NAs in screen_drug output.  # Set up end data.table::setDTthreads(0)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_meddra.html","id":null,"dir":"Reference","previous_headings":"","what":"Create MedDRA tables — tb_meddra","title":"Create MedDRA tables — tb_meddra","text":"Transform MedDRA .ascii files .parquet files MedDRA delivered ascii files, transform efficient format. Parquet format arrow many advantages: works --memory data, makes possible process tables computer --much RAM. also lightweighted standard across different langages. function also creates variables table. note MedDRA tables processed function. Three tables created: meddra_hierarchy, respects System Organ Class hierarchic classification. smq_list smq_content Standardized MedDRA Queries. Caution tends small variations MedDRA ascii files structure. Last verified version function working 26.1. Use dt_parquet() load tables afterward.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_meddra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create MedDRA tables — tb_meddra","text":"","code":"tb_meddra(path_meddra)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_meddra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create MedDRA tables — tb_meddra","text":"path_meddra Character string, directory containing MedDRA ascii tables. also output directory.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_meddra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create MedDRA tables — tb_meddra","text":".parquet files path_meddra directory. Three tables: meddra_hierarchy, smq_list, smq_content. columns returned integer (*_code columns). columns character.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_meddra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create MedDRA tables — tb_meddra","text":"","code":"if (FALSE) { # interactive()  # Use the examples from tb_main if you want to see these functions in action.  path_meddra <- paste0(tempdir(), \"/meddra_directory/\") dir.create(path_meddra) create_ex_meddra_asc(path_meddra)  tb_meddra(path_meddra = path_meddra)  # Clear temporary files when you're done unlink(path_meddra, recursive = TRUE) }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract of subset of Vigibase — tb_subset","title":"Extract of subset of Vigibase — tb_subset","text":"Create subset VigiBase ECL datasets","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract of subset of Vigibase — tb_subset","text":"","code":"tb_subset(   wd_in,   wd_out,   subset_var = c(\"drecno\", \"medprod_id\", \"meddra_id\", \"age\"),   sv_selection,   rm_suspdup = TRUE )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract of subset of Vigibase — tb_subset","text":"wd_in Source directory pathway (character) wd_out Output directory pathway (character) subset_var One \"drecno\", \"medprod_id\", \"meddra_id\", \"age\" sv_selection named list vector containing appropriate ids (according method, see details) rm_suspdup logical. suspected duplicates removed? TRUE default","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract of subset of Vigibase — tb_subset","text":"Parquet files output directory. files vigibase ECL main folder returned subsetted (including suspectedduplicates).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_subset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract of subset of Vigibase — tb_subset","text":"must select subset variable subset_var provide appropriate list according variable sv_selection. Available subset_var : drecno use Drug Record Number (DrecNo), Drug, subset drug (see get_drecno()). medprod_id use MedicinalProd_Id, also drug. May useful requesting ATC classes. (see get_atc_code()). meddra_id use MedDRA_Id, subset adr. (see get_llt_soc() See get_llt_smq()). age use AgeGroup demo. See . Age groups ids follows: 1 0 - 27 days 2 28 days 23 months 3 2 - 11 years 4 12 - 17 years 5 18 - 44 years 6 45 - 64 years 7 65 - 74 years 8 >= 75 years 9 Unknown Example: work patients aged 18 74, provide c(5, 6, 7) sv_selection. Use dt_parquet() load tables afterward.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract of subset of Vigibase — tb_subset","text":"","code":"if (FALSE) { # interactive()  # --- technical steps ---- #  wd_in <- paste0(tempdir(), \"/\", \"tbsubsetex\") dir.create(wd_in) create_ex_main_pq(wd_in)  # Select a subset_var and corresponding data  # Subset on adr colitis codes  adr_llt <-  list(    colitis = \"Colitis\"    ) |>    get_llt_soc(term_level = \"pt\", meddra_, verbose = FALSE)  wd_out <- paste0(wd_in, \"/\", \"colitis_subset\", \"/\")  tb_subset(wd_in, wd_out,           subset_var = \"meddra_id\",           sv_selection = adr_llt)  # Subset on drug codes   d_drecno <-    list(     ipi = \"ipilimumab\") |>     get_drecno(mp = mp_, verbose = FALSE)  wd_out <- paste0(wd_in, \"/\", \"nivolumab_subset\", \"/\")  tb_subset(wd_in, wd_out,           subset_var = \"drecno\",           sv_selection = d_drecno)   # Subset on age > 65 year-old   sv_selection <-     c(7, 8)  wd_out <- paste0(wd_in, \"/\", \"more_than_65_subset\", \"/\")  tb_subset(wd_in, wd_out,           subset_var = \"age\",           sv_selection = sv_selection)  unlink(wd_in, recursive = TRUE) }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_vigibase.html","id":null,"dir":"Reference","previous_headings":"","what":"Create main VigiBase ECL tables — tb_vigibase","title":"Create main VigiBase ECL tables — tb_vigibase","text":"Transform VigiBase .txt files .parquet files.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_vigibase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create main VigiBase ECL tables — tb_vigibase","text":"","code":"tb_vigibase(path_base, path_sub, force = FALSE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_vigibase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create main VigiBase ECL tables — tb_vigibase","text":"path_base Character string, directory containing vigibase txt tables. also output directory. path_sub Character string, directory containing subsidiary tables. force Logical, passed cli::cli_progress_update(). Used internal purposes.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_vigibase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create main VigiBase ECL tables — tb_vigibase","text":".parquet files main tables path_base directory: demo, adr, drug, link, ind, , srce, followup, suspdup (suspected duplicates) table. Check ?demo_ information tables. link table augmented tto_mean range, analyze time onset according recommendations (see vignette(\"descriptive\"). .parquet files subsidiary tables path_sub directory: AgeGroup, Dechallenge, Dechallenge2, Frequency, Gender, Notifier, Outcome, Rechallenge, Rechallenge2, Region, RepBasis, ReportType, RouteOfAdm, Seriousness, SizeUnit. .parquet files path_base directory (including suspected duplicates tables). columns returned integer (UMCReportId, Drug_Id, MedicinalProd_Id, Adr_Id, MedDRA_Id), columns numeric (TimeToOnsetMin, TimeToOnsetMax) columns character.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_vigibase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create main VigiBase ECL tables — tb_vigibase","text":"Vigibase Extract Case Level delivered zipped text files, transform efficient format. Parquet format arrow many advantages: works --memory data, makes possible process Vigibase tables computer --much RAM. also lightweighted standard across different langages. function also creates variables table. suspectedduplicates table added base directory. Use dt_parquet() load tables afterward.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_vigibase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create main VigiBase ECL tables — tb_vigibase","text":"","code":"if (FALSE) { # interactive()  # --- Set up example source files ---- ####  path_base <- paste0(tempdir(), \"/\", \"main\", \"/\")  path_sub  <- paste0(tempdir(), \"/\", \"sub\",  \"/\")  dir.create(path_base) dir.create(path_sub)  create_ex_main_txt(path_base) create_ex_sub_txt(path_sub)   # ---- Running tb_vigibase   tb_vigibase(path_base = path_base,         path_sub  = path_sub)   # Clear temporary files when you're done  unlink(path_base, recursive = TRUE)  unlink(path_sub, recursive = TRUE) }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_who.html","id":null,"dir":"Reference","previous_headings":"","what":"Create main WHO tables — tb_who","title":"Create main WHO tables — tb_who","text":"Transform Vigibase .txt files .parquet files WHODrug delivered zipped text files folder, transform efficient format. Parquet format arrow many advantages: can work --memory data, makes possible process tables computer --much RAM. also lightweighted standard across different languages. function also creates variables table. See tb_vigibase() running examples, try ?mp_ ?thg_ details. Use dt_parquet() load tables afterward.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_who.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create main WHO tables — tb_who","text":"","code":"tb_who(path_who, force = FALSE)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_who.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create main WHO tables — tb_who","text":"path_who Character string, directory containing whodrug txt tables. also output directory. force Logical, passed cli::cli_progress_update(). Used internal purposes.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_who.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create main WHO tables — tb_who","text":".parquet files path_who directory. columns returned integer (Id columns, including MedicinalProd_Id, notable exception DrecNo), columns numeric (Quantity ingredient table) columns character.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/tb_who.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create main WHO tables — tb_who","text":"","code":"if (FALSE) { # interactive()  # Use the examples from tb_main if you want to see these functions in action.  path_who <- paste0(tempdir(), \"/whodrug_directory/\") dir.create(path_who) create_ex_who_txt(path_who)  tb_who(path_who = path_who)  # Clear temporary files when you're done unlink(path_who, recursive = TRUE) }"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigi_routine.html","id":null,"dir":"Reference","previous_headings":"","what":"Pharmacovigilance routine function — vigi_routine","title":"Pharmacovigilance routine function — vigi_routine","text":"vigi_routine() draws Information Component plot Time Onset plot given drug-adr pair.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigi_routine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pharmacovigilance routine function — vigi_routine","text":"","code":"vigi_routine(   demo_data,   drug_data,   adr_data,   link_data,   d_code,   a_code,   case_tto = NULL,   vigibase_version,   analysis_setting = \"All reports\",   d_label = NULL,   a_label = NULL,   export_to = NULL )"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigi_routine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pharmacovigilance routine function — vigi_routine","text":"demo_data demo data.table. drug_data drug data.table. adr_data adr data.table. link_data link data.table. d_code named list. drug code(s) used. must one item d_code. a_code named list. adr code(s) used. must one item a_code. case_tto numeric. time onset studied case. See details. vigibase_version character. version VigiBase used (e.g. \"September 2024\"). passed plot legend. analysis_setting character. setting analysis. See details. d_label character. name drug, passed plot legend. Defaults names(d_code). a_label character. name adr, passed plot legend. Defaults names(a_code). export_to character. path export plot. NULL, plot exported. end \".eps\", \".ps\", \".tex\" (pictex), \".pdf\", \".jpeg\", \".tiff\", \".png\", \".bmp\", \".svg\" \".wmf\" (windows ).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigi_routine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pharmacovigilance routine function — vigi_routine","text":"ggplot2 graph, two panels. first panel, top, Information Component (IC) plot. arrow \"IC025 label\" indicate IC value selected drug-adr pair. second panel, bottom, Time Onset (TTO) density plot. derived cases drug suspected responsible adr. provide case_tto value, represented red line, label.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigi_routine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pharmacovigilance routine function — vigi_routine","text":"See vignette(\"routine_pharmacovigilance\") examples. output can exported. Time onset data bounded 1 day 10 years. Data outside range reassigned 1 day 10 years value, respectively. function works one item d_code a_code. working specific case, can provide case_tto value. value displayed Time Onset plot. demo table filtered specific cases (e.g. older adults, subset drugs), may want indicate setting plot legend, arg analysis_setting.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigi_routine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pharmacovigilance routine function — vigi_routine","text":"","code":"# Say you want to perform a disproportionality analysis between colitis and # nivolumab among ICI cases  # identify drug DrecNo, and adr LLT code  d_drecno <-   ex_$d_drecno[\"nivolumab\"]  a_llt <-   ex_$a_llt[\"a_colitis\"]  # But you could also use get_drecno() and get_llt_soc()  # load tables demo, drug, adr, and link  demo <- demo_ adr  <- adr_ drug <- drug_ link <- link_  # run routine  vigi_routine(   demo_data = demo,   drug_data = drug,   adr_data  = adr,   link_data = link,   d_code = d_drecno,   a_code = a_llt,   vigibase_version = \"September 2024\" )   # if you're working on a case, you can provide his/her time to onset # with arg `case_tto`  vigi_routine(   case_tto = 150,   demo_data = demo,   drug_data = drug,   adr_data  = adr,   link_data = link,   d_code = d_drecno,   a_code = a_llt,   vigibase_version = \"September 2024\" )    # Customize with d_name and a_name, export the plot with export_to  vigi_routine(   case_tto = 150,   demo_data = demo,   drug_data = drug,   adr_data  = adr,   link_data = link,   d_code = d_drecno,   a_code = a_llt,   vigibase_version = \"September 2024\",   d_label = \"Nivolumab\",   a_label = \"Colitis\",   export_to = paste0(tempdir(), \"/\", \"vigicaen_graph.png\") )  #> Plot exported to /tmp/Rtmp0hJOQI/vigicaen_graph.png"},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigicaen-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package vigicaen. — vigicaen-deprecated","title":"Deprecated functions in package vigicaen. — vigicaen-deprecated","text":"functions listed deprecated defunct near future. possible, alternative functions similar functionality also mentioned. Help pages deprecated functions available help(\"<function>-deprecated\").","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigicaen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vigicaen: 'VigiBase' Pharmacovigilance Database Toolbox — vigicaen-package","title":"vigicaen: 'VigiBase' Pharmacovigilance Database Toolbox — vigicaen-package","text":"Perform analysis World Health Organization () Pharmacovigilance database 'VigiBase' (Extract Case Level version), https://-umc.org/ e.g., load data, perform data management, disproportionality analysis, descriptive statistics. Intended pharmacovigilance routine use studies. package supported reflect opinion , Uppsala Monitoring Centre. Disproportionality methods described Norén et al (2013) doi:10.1177/0962280211403604 .","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/reference/vigicaen-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vigicaen: 'VigiBase' Pharmacovigilance Database Toolbox — vigicaen-package","text":"Maintainer: Charles Dolladille cdolladille@hotmail.com (ORCID) Authors: Basile Chrétien (ORCID) contributors: Universite de Caen Normandie (Caen, France) [copyright holder] Unite de pharmaco-epidemiologie (Service de pharmacologie, Centre Hospitalier Universitaire de Caen, Caen, France) [copyright holder]","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"new-features-0-15-6","dir":"Changelog","previous_headings":"","what":"New features","title":"vigicaen 0.15.6","text":"vigi_routine() now plots details drug liability rechallenge available (#119). desc_rch(), desc_dch() desc_outcome() now handle memory arrow Table (#127). compute_dispro() now handles factors x y arguments, levels strictly equal 0 1 (#134).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"minor-0-15-6","dir":"Changelog","previous_headings":"","what":"Minor","title":"vigicaen 0.15.6","text":"Error warnings turned cli syntax. Gathered redundant checkers internally (#133). vigi_routine() now works memory arrow Tables. Additional checkers vigi_routine() input data type. compute_or_mod() now informative error message either args estimate std_er supplied (#123). get_drecno() now handles non-names matching unique DrecNo several names, throws error matching multiple DrecNos (#139). Adding dependency glue.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"vigicaen-0155","dir":"Changelog","previous_headings":"","what":"vigicaen 0.15.5","title":"vigicaen 0.15.5","text":"CRAN release: 2025-02-21","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"minor-0-15-5","dir":"Changelog","previous_headings":"","what":"Minor","title":"vigicaen 0.15.5","text":"Working examples per CRAN query (#128). create_ex_* family mostly aimed example set internal use (#128).","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"minor-0-15-4","dir":"Changelog","previous_headings":"","what":"Minor","title":"vigicaen 0.15.4","text":"Fixing typos DESCRIPTION, per CRAN query.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"minor-0-15-3","dir":"Changelog","previous_headings":"","what":"Minor","title":"vigicaen 0.15.3","text":"Addressing CRAN queries package DESCRIPTION. Condensing examples tb_vigibase() default output.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"minor-0-15-2","dir":"Changelog","previous_headings":"","what":"Minor","title":"vigicaen 0.15.2","text":"Clearing remaining temp files tests","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"new-features-0-15-1","dir":"Changelog","previous_headings":"","what":"New features","title":"vigicaen 0.15.1","text":"tb_* family now cli style progress bar get_llt_soc() output reworked cli features. function also now correctly supports non-data.table data.frame. vigi_routine() fails drug adr cases found demo_data.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"breaking-changes-0-15-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"vigicaen 0.15.0","text":"mp replaces mp_short throughout package (#110). Users change existing code replace calls mp_short mp. get_llt_smq(), smq_list smq_content replace smq_list_content(#74). Users change existing code replace calls smq_list_content smq_list smq_content. Example tables smq_list_ smq_content_ added package. change made streamline process querying sub-SMQs. compute_dispro() new name compute_or_abcd(), reflect disproportionality measures available.","code":"# the old way mp_short <- dt_parquet(path_who, \"mp_short\") d_names <- list(drug1 = \"paracetamol\") d_drecno <- get_drecno(d_names, mp_short = mp_short)  # the new way mp <- dt_parquet(path_who, \"mp\") d_names <- list(drug1 = \"paracetamol\") d_drecno <- get_drecno(d_names, mp = mp) # the old way smq_list_content <- dt_parquet(path_meddra, \"smq_list_content\")  smq_llt <-    get_llt_smq(     list(ihd = \"Ischaemic heart disease (SMQ)\"),     smq_list_content)  # the new way smq_list <- dt_parquet(path_meddra, \"smq_list\") smq_content <- dt_parquet(path_meddra, \"smq_content\")  smq_llt <-    get_llt_smq(      list(ihd = \"Ischaemic heart disease (SMQ)\"),      smq_list = smq_list,      smq_content = smq_content)"},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"new-features-0-15-0","dir":"Changelog","previous_headings":"","what":"New features","title":"vigicaen 0.15.0","text":"Args inspect show_all get_drecno() replaced verbose (#102). get_drecno() get_llt_smq() messages cleaner written cli package. New top_n argument added screen_adr() (#86). screen_drug() let screen reported drugs drug (#103). get_llt_smq() now queries sub-SMQs return relevant codes (#74). Order output columns compute_dispro() changed, allow easier access formatted values. Also new arguments min_n_obs export_raw_values (#101). tb_subset() handles ID code lists input, instead numeric vectors, make workflow consistent processes like add_*. (#112)","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"minor-and-bug-fixes-0-15-0","dir":"Changelog","previous_headings":"","what":"Minor and bug Fixes","title":"vigicaen 0.15.0","text":"screen_adr() now counts effects case level (#86). arg data_type add_* functions now deprecated. Data_type internally detected. add_drug() add_adr() informative error id code list incorrect (#88).","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"documenting-0-15-0","dir":"Changelog","previous_headings":"","what":"Documenting","title":"vigicaen 0.15.0","text":"Several documenting issues adressed (#64, #77, #82, #106, #108, #109, #111)","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"new-features-0-14-0","dir":"Changelog","previous_headings":"","what":"New features","title":"vigicaen 0.14.0","text":"#90 Introducing vigi_routine() streamline process pharmacovigilance practitioners. function intended non-expert users, produce Information Component time onset graph. #94 luda table longer exists. replaced augmented version link - built directly tb_vigibase(), used downstream place luda.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"minor-0-14-0","dir":"Changelog","previous_headings":"","what":"Minor","title":"vigicaen 0.14.0","text":"#92 tb_main() tb_sub() fusionned tb_vigibase(). #93 now possible export raw data composing value column desc_facvar() desc_cont(), argument export_raw_values. #83 vignette(\"descriptive\") translated English.","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"bug-fixes-0-14-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"vigicaen 0.14.0","text":"#89 #87 get_* family functions now correctly handle memory tables (pulling memory). true extract_tto(). #85 Useless default values arguments extract_tto() removed.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"patch-0-13-5","dir":"Changelog","previous_headings":"","what":"Patch","title":"vigicaen 0.13.5","text":"#91 tb_* family correctly handles different ways providing paths, check existence files working tables.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"patch-0-13-4","dir":"Changelog","previous_headings":"","what":"Patch","title":"vigicaen 0.13.4","text":"#78 compute_or_abcd() now correctly handles large amount reports. #80 hot fix windows 1224 error","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"patch-0-13-3","dir":"Changelog","previous_headings":"","what":"Patch","title":"vigicaen 0.13.3","text":"#75 clearer example get_llt_soc() #76 SizeUnit_Lx file sub, encoded old format, now appropriately treated .","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"patch-0-13-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"vigicaen 0.13.2","text":"Failed ubuntu latest oldrel-1 licensing issue. Put license license file.","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"patch-0-13-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"vigicaen 0.13.1","text":"Fixing Windows 1224, using different temp sub folder test","code":""},{"path":[]},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"new-features-0-13-0","dir":"Changelog","previous_headings":"","what":"New features","title":"vigicaen 0.13.0","text":"Changing package’s name!! set public release. Improved documentation adding tags, translating english basic_workflow vignette. #62, #67, #69","code":""},{"path":"https://pharmacologie-caen.github.io/vigicaen/news/index.html","id":"patchs-0-13-0","dir":"Changelog","previous_headings":"","what":"Patchs","title":"vigicaen 0.13.0","text":"Increased code coverage back 100%.","code":""}]
